[{"D:\\dumps\\online-learning-platform-main\\Frontend\\src\\index.js":"1","D:\\dumps\\online-learning-platform-main\\Frontend\\src\\App.js":"2","D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\AdminLogin.js":"3","D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\LogIn.js":"4","D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\CourseCrud.js":"5","D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\Courses.js":"6","D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\SignUp1.js":"7","D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\SignUp.js":"8","D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\Toast.js":"9","D:\\dumps\\online-learning-platform-main\\Frontend\\src\\hooks\\useToast.js":"10","D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\Navbar.jsx":"11","D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\WelcomeTypewriter.js":"12","D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\ViewCourse.js":"13","D:\\EazyByts\\eLearning\\elearning-frontend\\src\\index.js":"14","D:\\EazyByts\\eLearning\\elearning-frontend\\src\\App.js":"15","D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\Courses.js":"16","D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\AdminLogin.js":"17","D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\CourseCrud.js":"18","D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\LogIn.js":"19","D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\ViewCourse.js":"20","D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\SignUp.js":"21","D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\WelcomeTypewriter.js":"22","D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\ViewCourseModal.js":"23","D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\CourseContentView.js":"24"},{"size":219,"mtime":1699195094000,"results":"25","hashOfConfig":"26"},{"size":1177,"mtime":1718148404388,"results":"27","hashOfConfig":"26"},{"size":2663,"mtime":1699195094000,"results":"28","hashOfConfig":"26"},{"size":4261,"mtime":1718142392481,"results":"29","hashOfConfig":"26"},{"size":2985,"mtime":1718150367923,"results":"30","hashOfConfig":"26"},{"size":9252,"mtime":1718150773583,"results":"31","hashOfConfig":"26"},{"size":2874,"mtime":1699195094000,"results":"32","hashOfConfig":"26"},{"size":4506,"mtime":1718124015590,"results":"33","hashOfConfig":"26"},{"size":694,"mtime":1718125812656,"results":"34","hashOfConfig":"26"},{"size":786,"mtime":1718125873339,"results":"35","hashOfConfig":"26"},{"size":434,"mtime":1718139728064,"results":"36","hashOfConfig":"26"},{"size":672,"mtime":1718145140665,"results":"37","hashOfConfig":"26"},{"size":3657,"mtime":1718151873266,"results":"38","hashOfConfig":"26"},{"size":221,"mtime":1718520258329,"results":"39","hashOfConfig":"40"},{"size":1628,"mtime":1718796471678,"results":"41","hashOfConfig":"40"},{"size":14539,"mtime":1718791197366,"results":"42","hashOfConfig":"40"},{"size":2663,"mtime":1699195094000,"results":"43","hashOfConfig":"40"},{"size":2985,"mtime":1718150367923,"results":"44","hashOfConfig":"40"},{"size":4791,"mtime":1718794264203,"results":"45","hashOfConfig":"40"},{"size":3805,"mtime":1718184196296,"results":"46","hashOfConfig":"40"},{"size":4506,"mtime":1718124015590,"results":"47","hashOfConfig":"40"},{"size":675,"mtime":1718197133552,"results":"48","hashOfConfig":"40"},{"size":1530,"mtime":1718373190507,"results":"49","hashOfConfig":"40"},{"size":6109,"mtime":1718788982811,"results":"50","hashOfConfig":"40"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1nwmket",{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"v0b6qu",{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"95"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"95"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"95"},"D:\\dumps\\online-learning-platform-main\\Frontend\\src\\index.js",[],[],["129"],"D:\\dumps\\online-learning-platform-main\\Frontend\\src\\App.js",["130"],[],"D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\AdminLogin.js",["131","132"],[],"import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\n\nimport { Container, Form, FormGroup, Label, Input, Button } from 'reactstrap';\n\nconst AdminLogin = () => {\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [otp, setOtp] = useState('');\n  const [generatedOtp, setGeneratedOtp] = useState(''); // Declare generatedOtp and setGeneratedOtp\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const navigate = useNavigate();\n\n  const handleGenerateOtp = () => {\n    // Generate a random six-digit OTP\n    const generatedOtp = Math.floor(100000 + Math.random() * 900000);\n\n    // Show the OTP as a notification\n    if ('Notification' in window) {\n      if (Notification.permission === 'granted') {\n        showNotification(generatedOtp);\n      } else if (Notification.permission !== 'denied') {\n        Notification.requestPermission().then((permission) => {\n          if (permission === 'granted') {\n            showNotification(generatedOtp);\n          }\n        });\n      }\n    }\n\n    setGeneratedOtp(generatedOtp.toString()); // Store generatedOtp in state as a string\n  };\n\n  const showNotification = (otp) => {\n    const notification = new Notification('Generated OTP', {\n      body: `Your OTP is ${otp}`,\n    });\n  };\n\n  const handleLogin = () => {\n    if (otp === generatedOtp) {\n      setIsLoggedIn(true);\n      navigate('/managecourse');\n    } else {\n      alert('Invalid OTP. Please try again.');\n    }\n  };\n\n  return (\n    <Container className=\"login-container\">\n      <h2 className=\"text-center mb-4\">Login</h2>\n      {!isLoggedIn ? (\n        <Form>\n          <FormGroup>\n            <Label for=\"phoneNumber\">Enter Phone Number</Label>\n            <Input\n              type=\"text\"\n              name=\"phoneNumber\"\n              id=\"phoneNumber\"\n              value={phoneNumber}\n              onChange={(e) => setPhoneNumber(e.target.value)}\n            />\n          </FormGroup>\n          <Button color=\"primary\" className=\"mb-3\" onClick={handleGenerateOtp}>\n            Generate OTP\n          </Button>\n          <FormGroup>\n            <Label for=\"otp\">Enter OTP</Label>\n            <Input\n              type=\"text\"\n              name=\"otp\"\n              id=\"otp\"\n              value={otp}\n              onChange={(e) => setOtp(e.target.value)}\n            />\n          </FormGroup>\n          <Button color=\"success\" onClick={handleLogin}>\n            Login\n          </Button>\n        </Form>\n      ) : (\n        <p className=\"text-center mt-3\">You are logged in!</p>\n        \n        \n      )}\n    </Container>\n  );\n};\n\nexport default AdminLogin;\n","D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\LogIn.js",[],[],"D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\CourseCrud.js",[],[],"D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\Courses.js",["133","134","135"],[],"D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\SignUp1.js",[],[],"D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\SignUp.js",[],[],"D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\Toast.js",[],[],"D:\\dumps\\online-learning-platform-main\\Frontend\\src\\hooks\\useToast.js",[],[],"D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\Navbar.jsx",[],[],"D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\WelcomeTypewriter.js",[],[],"D:\\dumps\\online-learning-platform-main\\Frontend\\src\\components\\ViewCourse.js",[],[],"D:\\EazyByts\\eLearning\\elearning-frontend\\src\\index.js",[],[],["136"],"D:\\EazyByts\\eLearning\\elearning-frontend\\src\\App.js",[],[],"D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\Courses.js",["137"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { Card, CardBody, CardSubtitle, CardText, Button, Container, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import the confirm alert\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import the CSS for react-confirm-alert\r\nimport '../components/css/Courses.css'; // Import the CSS file\r\nimport * as THREE from 'three';\r\nimport GLOBE from 'vanta/dist/vanta.globe.min';\r\nimport Typewriter from 'typewriter-effect';\r\nimport WelcomeTypewriter from './WelcomeTypewriter';\r\nimport '../components/css/ViewCourseModal.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronDown } from '@fortawesome/free-solid-svg-icons'; // Import specific icons as needed\r\n\r\nconst ManageCourses = () => {\r\n    const [videos, setVideos] = useState([]);\r\n    const [selectedCourse, setSelectedCourse] = useState(null); // State for the selected course\r\n    const location = useLocation();\r\n    const role = location.state?.role || 'user';\r\n    const username = location.state?.username;\r\n    const userid = location.state?.userid;\r\n    const vantaRef = useRef(null);\r\n    const videoCardsRef = useRef(null);\r\n    const coursesListRef = useRef(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (!vantaRef.current) return;\r\n\r\n        const vantaEffect = GLOBE({\r\n            el: vantaRef.current,\r\n            mouseControls: true,\r\n            touchControls: true,\r\n            gyroControls: false,\r\n            minHeight: 100.00,\r\n            minWidth: 100.00,\r\n            scale: 1.00,\r\n            scaleMobile: 1.00,\r\n            color: 0x3fffcf,\r\n            backgroundColor: 0x20018,\r\n            THREE,\r\n        });\r\n\r\n        return () => {\r\n            if (vantaEffect) vantaEffect.destroy();\r\n        };\r\n    }, [vantaRef.current]);\r\n\r\n    useEffect(() => {\r\n        fetchVideos();\r\n    }, []);\r\n\r\n    const fetchVideos = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:8080/course/getall');\r\n            if (Array.isArray(response.data)) {\r\n                setVideos(response.data);\r\n            } else {\r\n                console.error('Expected an array but got:', response.data);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching videos:', error);\r\n        }\r\n    };\r\n\r\n    const handleDeleteCourse = async (courseId) => {\r\n        try {\r\n            await axios.delete('http://localhost:8080/course/deletecourse', {\r\n                params: { courseId, role }\r\n            });\r\n            fetchVideos(); // Re-fetch videos to update the list after deleting a course\r\n        } catch (error) {\r\n            alert('Error deleting course: ' + error.message);\r\n        }\r\n    };\r\n\r\n    const confirmDelete = (courseId) => {\r\n        confirmAlert({\r\n            title: 'Confirm to delete',\r\n            message: 'Are you sure you want to delete this course?',\r\n            buttons: [\r\n                {\r\n                    label: 'Yes',\r\n                    onClick: () => handleDeleteCourse(courseId)\r\n                },\r\n                {\r\n                    label: 'No',\r\n                    onClick: () => { }\r\n                }\r\n            ],\r\n            closeOnEscape: true,\r\n            closeOnClickOutside: true\r\n        });\r\n    };\r\n\r\n    const handleCourseClick = (course) => {\r\n        setSelectedCourse(course);\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setSelectedCourse(null);\r\n    };\r\n\r\n    // const handleStartCourse = () => {\r\n    //     if (selectedCourse) {\r\n    //         navigate(`/coursecontentview/${selectedCourse.id}`, { state: { role, selectedCourse } });\r\n    //     }\r\n    // };\r\n\r\n    const handleStartCourse = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (selectedCourse) {\r\n            try {\r\n                const response = await axios.post('http://localhost:8080/user/updateCourse', {\r\n                    userId: userid,\r\n                    courseId: selectedCourse.id\r\n                });\r\n\r\n                if (response.status === 200) {\r\n                    console.log('Course updated successfully:', response.data);\r\n                    navigate('/coursecontentview', { state: { role: role, username: username, userid: userid, courseId: selectedCourse.id } });\r\n                }\r\n            } catch (error) {\r\n                console.error('Error updating course:', error);\r\n                alert('Error updating course: ' + error.message);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    const handleScrollToVideos = () => {\r\n        if (coursesListRef.current) {\r\n            coursesListRef.current.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button className=\"LogOut-Btn\" onClick={() => navigate('/', { state: { role: 'admin' } })}>\r\n                <div className=\"sign\">\r\n                    <svg viewBox=\"0 0 512 512\">\r\n                        <path d=\"M377.9 105.9L500.7 228.7c7.2 7.2 11.3 17.1 11.3 27.3s-4.1 20.1-11.3 27.3L377.9 406.1c-6.4 6.4-15 9.9-24 9.9c-18.7 0-33.9-15.2-33.9-33.9l0-62.1-128 0c-17.7 0-32-14.3-32-32l0-64c0-17.7 14.3-32 32-32l128 0 0-62.1c0-18.7 15.2-33.9 33.9-33.9c9 0 17.6 3.6 24 9.9zM160 96L96 96c-17.7 0-32 14.3-32 32l0 256c0 17.7 14.3 32 32 32l64 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-64 0c-53 0-96-43-96-96L0 128C0 75 43 32 96 32l64 0c17.7 0 32 14.3 32 32s-14.3 32-32 32z\"></path>\r\n                    </svg>\r\n                </div>\r\n                <div className=\"text\">Logout</div>\r\n            </button>\r\n\r\n            {role === 'admin' ? (\r\n                <>\r\n                    <h1 className=\"header\" style={{ color: \"#000000\" }}>\r\n                        Admin Dashboard\r\n                    </h1>\r\n                    <div className=\"button-section\">\r\n                        <Button className=\"add-course-button\" onClick={() => navigate('/addcourse', { state: { role: 'admin' } })}>\r\n                            Add New Course\r\n                        </Button>\r\n                    </div>\r\n\r\n                    <hr style={{ color: \"#000000\" }}></hr>\r\n\r\n                    <div ref={coursesListRef} className='courses-header' style={{ color: \"#000000\" }}>\r\n                        <h1>Available Courses</h1>\r\n                    </div>\r\n\r\n                    <div ref={videoCardsRef} className=\"video-cards\" >\r\n                        {videos.map((video, index) => (\r\n                            <Card key={index} className=\"video-card\" style={{ border: \"none\", backdropFilter: \"none\" }}>\r\n                                <CardBody className=\"video-card-body\">\r\n                                    <CardSubtitle tag=\"h5\" className=\"video-card-title\">{video.coursename}</CardSubtitle>\r\n                                    <CardText className=\"video-card-text\">{video.courseauthor}</CardText>\r\n                                    <Container className=\"video-container\">\r\n                                        {video.url && (\r\n                                            <iframe\r\n                                                title={`Video ${index}`}\r\n                                                className=\"embed-responsive-item\"\r\n                                                src={`https://www.youtube.com/embed/${extractVideoId(video.url)}`}\r\n                                                allowFullScreen\r\n                                            ></iframe>\r\n                                        )}\r\n                                    </Container>\r\n                                    {role === 'admin' && (\r\n                                        <div className=\"button-group\">\r\n                                            <Button color=\"danger\" onClick={(e) => { e.stopPropagation(); confirmDelete(video.id); }}>\r\n                                                Delete\r\n                                            </Button>\r\n                                        </div>\r\n                                    )}\r\n                                </CardBody>\r\n                            </Card>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <div ref={vantaRef} className=\"userdash\">\r\n\r\n                        <h1 className=\"header-user\" style={{ color: \"#ffffff\" }}>\r\n                            StudyNest\r\n                        </h1>\r\n\r\n                        <WelcomeTypewriter username={username} />\r\n\r\n                        <Typewriter\r\n                            options={{\r\n                                strings: [\r\n                                    \"Unlock your potential with StudyNest!\",\r\n                                    \"Embark on a journey of knowledge and growth.\",\r\n                                    \"Ignite your curiosity with our curated courses.\",\r\n                                    \"Transform your learning experience today.\",\r\n                                    \"Explore a world of endless possibilities.\",\r\n                                    \"Empower yourself through education.\",\r\n                                    \"Discover new passions and skills.\",\r\n                                    \"Expand your horizons with StudyNest.\",\r\n                                    \"Turn dreams into achievements with us.\",\r\n                                    \"Join a community of lifelong learners.\",\r\n                                    \"Experience the joy of continuous learning.\",\r\n                                    \"Fuel your ambition with our diverse courses.\",\r\n                                    \"Every step you take brings you closer to success.\",\r\n                                    \"Start your learning adventure with StudyNest!\",\r\n                                    \"Let's shape a brighter future together.\"\r\n                                ],\r\n                                delay: 30,\r\n                                deleteSpeed: 30,\r\n                                autoStart: true,\r\n                                loop: true,\r\n                                wrapperClassName: \"typewriter-messages\",\r\n                                cursorClassName: \"typewriter-messages-cursor\"\r\n                            }}\r\n                            className=\"info-typewriter\"\r\n                        />\r\n\r\n                        <div onClick={handleScrollToVideos} className=\"scroll-button\">\r\n                            Go to Courses\r\n                            <FontAwesomeIcon className='arrow' icon={faChevronDown} size=\"xl\" color='white' />\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                    <div ref={coursesListRef} className='courses-header'>\r\n                        <h1>Select One Course To Start</h1>\r\n                    </div>\r\n\r\n                    <div ref={videoCardsRef} className=\"video-cards\">\r\n                        {videos.map((video, index) => (\r\n                            <Card key={index} className=\"video-card\" onClick={() => handleCourseClick(video)}>\r\n                                <CardBody className=\"video-card-body\">\r\n                                    <CardSubtitle tag=\"h5\" className=\"video-card-title\">{video.coursename}</CardSubtitle>\r\n                                    <CardText className=\"video-card-text\">{video.courseauthor}</CardText>\r\n                                    <Container className=\"video-container\">\r\n                                        {video.url && (\r\n                                            <iframe\r\n                                                title={`Video ${index}`}\r\n                                                className=\"embed-responsive-item\"\r\n                                                src={`https://www.youtube.com/embed/${extractVideoId(video.url)}`}\r\n                                                allowFullScreen\r\n                                            ></iframe>\r\n                                        )}\r\n                                    </Container>\r\n                                    {role === 'admin' && (\r\n                                        <div className=\"button-group\">\r\n                                            <Button color=\"danger\" onClick={(e) => { e.stopPropagation(); confirmDelete(video.id); }}>\r\n                                                Delete\r\n                                            </Button>\r\n                                        </div>\r\n                                    )}\r\n                                </CardBody>\r\n                            </Card>\r\n                        ))}\r\n                    </div>\r\n\r\n                    {selectedCourse && (\r\n                        <Modal isOpen={true} toggle={handleCloseModal}>\r\n                            <ModalHeader toggle={handleCloseModal}>{selectedCourse.coursename}</ModalHeader>\r\n                            <ModalBody>\r\n                                <p>Author: {selectedCourse.courseauthor}</p>\r\n                                <Container className=\"modal-video-container\">\r\n                                    <iframe\r\n                                        title=\"Selected Video\"\r\n                                        className=\"modal-embed-responsive-item\"\r\n                                        src={`https://www.youtube.com/embed/${extractVideoId(selectedCourse.url)}`}\r\n                                        allowFullScreen\r\n                                    ></iframe>\r\n                                </Container>\r\n                            </ModalBody>\r\n                            <ModalFooter>\r\n                                <Button color=\"primary\" onClick={handleStartCourse}>Start Course</Button>\r\n                                <Button color=\"secondary\" onClick={handleCloseModal}>Close</Button>\r\n                            </ModalFooter>\r\n                        </Modal>\r\n                    )}\r\n                </>\r\n            )}\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nconst extractVideoId = (url) => {\r\n    if (!url) return '';\r\n    const videoId = url.split('v=')[1];\r\n    if (videoId) {\r\n        const ampersandPosition = videoId.indexOf('&');\r\n        if (ampersandPosition !== -1) {\r\n            return videoId.substring(0, ampersandPosition);\r\n        }\r\n        return videoId;\r\n    }\r\n    return '';\r\n};\r\n\r\nexport default ManageCourses;\r\n","D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\AdminLogin.js",["138","139"],[],"D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\CourseCrud.js",[],[],"D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\LogIn.js",[],[],"D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\ViewCourse.js",[],[],"D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\SignUp.js",[],[],"D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\WelcomeTypewriter.js",[],[],"D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\ViewCourseModal.js",[],[],["140"],"D:\\EazyByts\\eLearning\\elearning-frontend\\src\\components\\CourseContentView.js",["141"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../components/css/CourseContentView.css';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Confetti from 'react-confetti';\r\n\r\nconst CourseContentView = () => {\r\n    const location = useLocation();\r\n    const courseId = location.state?.courseId || null;\r\n    const userid = location.state?.userid || null;\r\n    const username = location.state?.username || null;\r\n    const role = location.state?.role || null;\r\n    const [contents, setContents] = useState([]);\r\n    const [selectedContent, setSelectedContent] = useState({});\r\n    const [message, setMessage] = useState('');\r\n    const [showConfetti, setShowConfetti] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (courseId) {\r\n            fetchMaterials(courseId);\r\n        }\r\n    }, [courseId]);\r\n\r\n    const fetchMaterials = async (courseId) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:8080/material/course/${courseId}`);\r\n            if (Array.isArray(response.data)) {\r\n                setContents(response.data);\r\n                const firstIncompleteMaterial = response.data.find(material => !material.completed);\r\n                if (firstIncompleteMaterial) {\r\n                    setSelectedContent(firstIncompleteMaterial);\r\n                } else if (response.data.length > 0) {\r\n                    setSelectedContent(response.data[0]);\r\n                }\r\n            } else {\r\n                console.error('Fetched data is not an array:', response.data);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching materials:', error);\r\n        }\r\n    };\r\n\r\n    const markAsCompleted = async () => {\r\n        try {\r\n            const formData = new URLSearchParams();\r\n            formData.append('materialId', selectedContent.id);\r\n            formData.append('isCompleted', true);\r\n\r\n            await axios.put(`http://localhost:8080/material/updateProgress`, formData);\r\n\r\n            fetchMaterials(courseId); // Refresh materials after marking as completed\r\n        } catch (error) {\r\n            console.error('Error updating material progress:', error);\r\n        }\r\n    };\r\n\r\n    const handleCourseCompletion = async () => {\r\n        try {\r\n            // Remove the course from the user\r\n            await axios.post('http://localhost:8080/user/removeCourse', {\r\n                userId: userid,\r\n            });\r\n\r\n            // Reset the completion status of all materials in the course\r\n            await axios.put(`http://localhost:8080/material/resetProgress/${courseId}`);\r\n\r\n            console.log('Course removed and materials reset successfully.');\r\n\r\n        } catch (error) {\r\n            console.error('Error handling course completion:', error);\r\n            alert('Error handling course completion: ' + error.message);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (contents.length > 0 && contents.every(material => material.completed)) {\r\n            setMessage('Congratulations! Your course has been completed!🎉');\r\n            setShowConfetti(true);\r\n            handleCourseCompletion();\r\n        } else {\r\n            setMessage('');\r\n        }\r\n    }, [contents]);\r\n\r\n    const extractVideoId = (url) => {\r\n        if (!url) return '';\r\n        const videoId = url.split('v=')[1];\r\n        if (videoId) {\r\n            const ampersandPosition = videoId.indexOf('&');\r\n            if (ampersandPosition !== -1) {\r\n                return videoId.substring(0, ampersandPosition);\r\n            }\r\n            return videoId;\r\n        }\r\n        return '';\r\n    };\r\n\r\n    return (\r\n        <div className=\"course-content-view\">\r\n            {showConfetti && (\r\n                <>\r\n                    <Confetti gravity={0.05} />\r\n                    <div className=\"completion-message\">\r\n                        {message}\r\n                        <button className=\"CourseContentView-btn\" onClick={() => navigate('/courses', { state: { role: role, username: username, userid: userid } })}>\r\n                            Choose New Course\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            <div className=\"content-list\">\r\n                <h3>Course Content</h3>\r\n                <ul>\r\n                    {contents.map((content, index) => (\r\n                        <li\r\n                            key={index}\r\n                            className={`${content.completed ? 'completed' : ''} ${content.name === selectedContent?.name ? 'active' : ''}`}\r\n                            onClick={() => setSelectedContent(content)}\r\n                        >\r\n                            {content.name}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n            {selectedContent && selectedContent.name && (\r\n                <div className=\"content-details\">\r\n                    <div className=\"header\">\r\n                        <h3>{selectedContent.name}</h3>\r\n                        {selectedContent && !selectedContent.completed && (\r\n                            <button className=\"CourseContentView-btn\" onClick={markAsCompleted}>\r\n                                Mark as Completed\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"video-container\">\r\n                        <iframe\r\n                            title={selectedContent.name}\r\n                            src={`https://www.youtube.com/embed/${extractVideoId(selectedContent.url)}`}\r\n                            allowFullScreen\r\n                        ></iframe>\r\n                    </div>\r\n                    <div className=\"transcript\">\r\n                        <h4>Video Transcript</h4>\r\n                        <p>{selectedContent.content}</p>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CourseContentView;\r\n",{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":7,"column":8,"nodeType":"146","messageId":"147","endLine":7,"endColumn":14},{"ruleId":"144","severity":1,"message":"148","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":18},{"ruleId":"144","severity":1,"message":"149","line":36,"column":11,"nodeType":"146","messageId":"147","endLine":36,"endColumn":23},{"ruleId":"144","severity":1,"message":"150","line":15,"column":12,"nodeType":"146","messageId":"147","endLine":15,"endColumn":19},{"ruleId":"151","severity":1,"message":"152","line":43,"column":8,"nodeType":"153","endLine":43,"endColumn":26,"suggestions":"154"},{"ruleId":"144","severity":1,"message":"155","line":71,"column":11,"nodeType":"146","messageId":"147","endLine":71,"endColumn":26},{"ruleId":"142","replacedBy":"156"},{"ruleId":"151","severity":1,"message":"152","line":48,"column":8,"nodeType":"153","endLine":48,"endColumn":26,"suggestions":"157"},{"ruleId":"144","severity":1,"message":"148","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":18},{"ruleId":"144","severity":1,"message":"149","line":36,"column":11,"nodeType":"146","messageId":"147","endLine":36,"endColumn":23},{"ruleId":"142","replacedBy":"158"},{"ruleId":"151","severity":1,"message":"159","line":86,"column":8,"nodeType":"153","endLine":86,"endColumn":18,"suggestions":"160"},"no-new-object",["161"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'notification' is assigned a value but never used.","'courses' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'vantaRef.current'. Either exclude it or remove the dependency array. Mutable values like 'vantaRef.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["162"],"'handleAddCourse' is assigned a value but never used.",["161"],["163"],["161"],"React Hook useEffect has a missing dependency: 'handleCourseCompletion'. Either include it or remove the dependency array.",["164"],"no-object-constructor",{"desc":"165","fix":"166"},{"desc":"165","fix":"167"},{"desc":"168","fix":"169"},"Update the dependencies array to be: []",{"range":"170","text":"171"},{"range":"172","text":"171"},"Update the dependencies array to be: [contents, handleCourseCompletion]",{"range":"173","text":"174"},[1662,1680],"[]",[2005,2023],[3318,3328],"[contents, handleCourseCompletion]"]