{"ast":null,"code":"import F_Schlick from './F_Schlick.js';\nimport V_GGX_SmithCorrelated from './V_GGX_SmithCorrelated.js';\nimport V_GGX_SmithCorrelated_Anisotropic from './V_GGX_SmithCorrelated_Anisotropic.js';\nimport D_GGX from './D_GGX.js';\nimport D_GGX_Anisotropic from './D_GGX_Anisotropic.js';\nimport { transformedNormalView } from '../../accessors/NormalNode.js';\nimport { positionViewDirection } from '../../accessors/PositionNode.js';\nimport { iridescence, alphaT, anisotropyT, anisotropyB } from '../../core/PropertyNode.js';\nimport { tslFn, defined } from '../../shadernode/ShaderNode.js';\n\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\nconst BRDF_GGX = tslFn(inputs => {\n  const {\n    lightDirection,\n    f0,\n    f90,\n    roughness,\n    f,\n    USE_IRIDESCENCE,\n    USE_ANISOTROPY\n  } = inputs;\n  const normalView = inputs.normalView || transformedNormalView;\n  const alpha = roughness.pow2(); // UE4's roughness\n\n  const halfDir = lightDirection.add(positionViewDirection).normalize();\n  const dotNL = normalView.dot(lightDirection).clamp();\n  const dotNV = normalView.dot(positionViewDirection).clamp(); // @ TODO: Move to core dotNV\n  const dotNH = normalView.dot(halfDir).clamp();\n  const dotVH = positionViewDirection.dot(halfDir).clamp();\n  let F = F_Schlick({\n    f0,\n    f90,\n    dotVH\n  });\n  let V, D;\n  if (defined(USE_IRIDESCENCE)) {\n    F = iridescence.mix(F, f);\n  }\n  if (defined(USE_ANISOTROPY)) {\n    const dotTL = anisotropyT.dot(lightDirection);\n    const dotTV = anisotropyT.dot(positionViewDirection);\n    const dotTH = anisotropyT.dot(halfDir);\n    const dotBL = anisotropyB.dot(lightDirection);\n    const dotBV = anisotropyB.dot(positionViewDirection);\n    const dotBH = anisotropyB.dot(halfDir);\n    V = V_GGX_SmithCorrelated_Anisotropic({\n      alphaT,\n      alphaB: alpha,\n      dotTV,\n      dotBV,\n      dotTL,\n      dotBL,\n      dotNV,\n      dotNL\n    });\n    D = D_GGX_Anisotropic({\n      alphaT,\n      alphaB: alpha,\n      dotNH,\n      dotTH,\n      dotBH\n    });\n  } else {\n    V = V_GGX_SmithCorrelated({\n      alpha,\n      dotNL,\n      dotNV\n    });\n    D = D_GGX({\n      alpha,\n      dotNH\n    });\n  }\n  return F.mul(V).mul(D);\n}); // validated\n\nexport default BRDF_GGX;","map":{"version":3,"names":["F_Schlick","V_GGX_SmithCorrelated","V_GGX_SmithCorrelated_Anisotropic","D_GGX","D_GGX_Anisotropic","transformedNormalView","positionViewDirection","iridescence","alphaT","anisotropyT","anisotropyB","tslFn","defined","BRDF_GGX","inputs","lightDirection","f0","f90","roughness","f","USE_IRIDESCENCE","USE_ANISOTROPY","normalView","alpha","pow2","halfDir","add","normalize","dotNL","dot","clamp","dotNV","dotNH","dotVH","F","V","D","mix","dotTL","dotTV","dotTH","dotBL","dotBV","dotBH","alphaB","mul"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/functions/BSDF/BRDF_GGX.js"],"sourcesContent":["import F_Schlick from './F_Schlick.js';\nimport V_GGX_SmithCorrelated from './V_GGX_SmithCorrelated.js';\nimport V_GGX_SmithCorrelated_Anisotropic from './V_GGX_SmithCorrelated_Anisotropic.js';\nimport D_GGX from './D_GGX.js';\nimport D_GGX_Anisotropic from './D_GGX_Anisotropic.js';\nimport { transformedNormalView } from '../../accessors/NormalNode.js';\nimport { positionViewDirection } from '../../accessors/PositionNode.js';\nimport { iridescence, alphaT, anisotropyT, anisotropyB } from '../../core/PropertyNode.js';\nimport { tslFn, defined } from '../../shadernode/ShaderNode.js';\n\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\nconst BRDF_GGX = tslFn( ( inputs ) => {\n\n\tconst { lightDirection, f0, f90, roughness, f, USE_IRIDESCENCE, USE_ANISOTROPY } = inputs;\n\n\tconst normalView = inputs.normalView || transformedNormalView;\n\n\tconst alpha = roughness.pow2(); // UE4's roughness\n\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\n\n\tconst dotNL = normalView.dot( lightDirection ).clamp();\n\tconst dotNV = normalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\n\tconst dotNH = normalView.dot( halfDir ).clamp();\n\tconst dotVH = positionViewDirection.dot( halfDir ).clamp();\n\n\tlet F = F_Schlick( { f0, f90, dotVH } );\n\tlet V, D;\n\n\tif ( defined( USE_IRIDESCENCE ) ) {\n\n\t\tF = iridescence.mix( F, f );\n\n\t}\n\n\tif ( defined( USE_ANISOTROPY ) ) {\n\n\t\tconst dotTL = anisotropyT.dot( lightDirection );\n\t\tconst dotTV = anisotropyT.dot( positionViewDirection );\n\t\tconst dotTH = anisotropyT.dot( halfDir );\n\t\tconst dotBL = anisotropyB.dot( lightDirection );\n\t\tconst dotBV = anisotropyB.dot( positionViewDirection );\n\t\tconst dotBH = anisotropyB.dot( halfDir );\n\n\t\tV = V_GGX_SmithCorrelated_Anisotropic( { alphaT, alphaB: alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL } );\n\t\tD = D_GGX_Anisotropic( { alphaT, alphaB: alpha, dotNH, dotTH, dotBH } );\n\n\t} else {\n\n\t\tV = V_GGX_SmithCorrelated( { alpha, dotNL, dotNV } );\n\t\tD = D_GGX( { alpha, dotNH } );\n\n\t}\n\n\treturn F.mul( V ).mul( D );\n\n} ); // validated\n\nexport default BRDF_GGX;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}