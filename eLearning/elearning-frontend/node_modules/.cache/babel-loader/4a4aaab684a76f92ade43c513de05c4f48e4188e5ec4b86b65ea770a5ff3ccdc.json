{"ast":null,"code":"import LightingNode from './LightingNode.js';\nimport { cache } from '../core/CacheNode.js';\nimport { context } from '../core/ContextNode.js';\nimport { roughness, clearcoatRoughness } from '../core/PropertyNode.js';\nimport { cameraViewMatrix } from '../accessors/CameraNode.js';\nimport { transformedClearcoatNormalView, transformedNormalView, transformedNormalWorld } from '../accessors/NormalNode.js';\nimport { positionViewDirection } from '../accessors/PositionNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { float } from '../shadernode/ShaderNode.js';\nimport { reference } from '../accessors/ReferenceNode.js';\nimport { transformedBentNormalView } from '../accessors/AccessorsUtils.js';\nimport { pmremTexture } from '../pmrem/PMREMNode.js';\nconst envNodeCache = new WeakMap();\nclass EnvironmentNode extends LightingNode {\n  constructor(envNode = null) {\n    super();\n    this.envNode = envNode;\n  }\n  setup(builder) {\n    let envNode = this.envNode;\n    if (envNode.isTextureNode) {\n      let cacheEnvNode = envNodeCache.get(envNode.value);\n      if (cacheEnvNode === undefined) {\n        cacheEnvNode = pmremTexture(envNode.value);\n        envNodeCache.set(envNode.value, cacheEnvNode);\n      }\n      envNode = cacheEnvNode;\n    }\n\n    //\n\n    const {\n      material\n    } = builder;\n    const envMap = material.envMap;\n    const intensity = envMap ? reference('envMapIntensity', 'float', builder.material) : reference('environmentIntensity', 'float', builder.scene); // @TODO: Add materialEnvIntensity in MaterialNode\n\n    const useAnisotropy = material.useAnisotropy === true || material.anisotropy > 0;\n    const radianceNormalView = useAnisotropy ? transformedBentNormalView : transformedNormalView;\n    const radiance = context(envNode, createRadianceContext(roughness, radianceNormalView)).mul(intensity);\n    const irradiance = context(envNode, createIrradianceContext(transformedNormalWorld)).mul(Math.PI).mul(intensity);\n    const isolateRadiance = cache(radiance);\n\n    //\n\n    builder.context.radiance.addAssign(isolateRadiance);\n    builder.context.iblIrradiance.addAssign(irradiance);\n\n    //\n\n    const clearcoatRadiance = builder.context.lightingModel.clearcoatRadiance;\n    if (clearcoatRadiance) {\n      const clearcoatRadianceContext = context(envNode, createRadianceContext(clearcoatRoughness, transformedClearcoatNormalView)).mul(intensity);\n      const isolateClearcoatRadiance = cache(clearcoatRadianceContext);\n      clearcoatRadiance.addAssign(isolateClearcoatRadiance);\n    }\n  }\n}\nconst createRadianceContext = (roughnessNode, normalViewNode) => {\n  let reflectVec = null;\n  return {\n    getUV: () => {\n      if (reflectVec === null) {\n        reflectVec = positionViewDirection.negate().reflect(normalViewNode);\n\n        // Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\n        reflectVec = roughnessNode.mul(roughnessNode).mix(reflectVec, normalViewNode).normalize();\n        reflectVec = reflectVec.transformDirection(cameraViewMatrix);\n      }\n      return reflectVec;\n    },\n    getTextureLevel: () => {\n      return roughnessNode;\n    }\n  };\n};\nconst createIrradianceContext = normalWorldNode => {\n  return {\n    getUV: () => {\n      return normalWorldNode;\n    },\n    getTextureLevel: () => {\n      return float(1.0);\n    }\n  };\n};\nexport default EnvironmentNode;\naddNodeClass('EnvironmentNode', EnvironmentNode);","map":{"version":3,"names":["LightingNode","cache","context","roughness","clearcoatRoughness","cameraViewMatrix","transformedClearcoatNormalView","transformedNormalView","transformedNormalWorld","positionViewDirection","addNodeClass","float","reference","transformedBentNormalView","pmremTexture","envNodeCache","WeakMap","EnvironmentNode","constructor","envNode","setup","builder","isTextureNode","cacheEnvNode","get","value","undefined","set","material","envMap","intensity","scene","useAnisotropy","anisotropy","radianceNormalView","radiance","createRadianceContext","mul","irradiance","createIrradianceContext","Math","PI","isolateRadiance","addAssign","iblIrradiance","clearcoatRadiance","lightingModel","clearcoatRadianceContext","isolateClearcoatRadiance","roughnessNode","normalViewNode","reflectVec","getUV","negate","reflect","mix","normalize","transformDirection","getTextureLevel","normalWorldNode"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/lighting/EnvironmentNode.js"],"sourcesContent":["import LightingNode from './LightingNode.js';\nimport { cache } from '../core/CacheNode.js';\nimport { context } from '../core/ContextNode.js';\nimport { roughness, clearcoatRoughness } from '../core/PropertyNode.js';\nimport { cameraViewMatrix } from '../accessors/CameraNode.js';\nimport { transformedClearcoatNormalView, transformedNormalView, transformedNormalWorld } from '../accessors/NormalNode.js';\nimport { positionViewDirection } from '../accessors/PositionNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { float } from '../shadernode/ShaderNode.js';\nimport { reference } from '../accessors/ReferenceNode.js';\nimport { transformedBentNormalView } from '../accessors/AccessorsUtils.js';\nimport { pmremTexture } from '../pmrem/PMREMNode.js';\n\nconst envNodeCache = new WeakMap();\n\nclass EnvironmentNode extends LightingNode {\n\n\tconstructor( envNode = null ) {\n\n\t\tsuper();\n\n\t\tthis.envNode = envNode;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tlet envNode = this.envNode;\n\n\t\tif ( envNode.isTextureNode ) {\n\n\t\t\tlet cacheEnvNode = envNodeCache.get( envNode.value );\n\n\t\t\tif ( cacheEnvNode === undefined ) {\n\n\t\t\t\tcacheEnvNode = pmremTexture( envNode.value );\n\n\t\t\t\tenvNodeCache.set( envNode.value, cacheEnvNode );\n\n\t\t\t}\n\n\t\t\tenvNode\t= cacheEnvNode;\n\n\t\t}\n\n\t\t//\n\n\t\tconst { material } = builder;\n\n\t\tconst envMap = material.envMap;\n\t\tconst intensity = envMap ? reference( 'envMapIntensity', 'float', builder.material ) : reference( 'environmentIntensity', 'float', builder.scene ); // @TODO: Add materialEnvIntensity in MaterialNode\n\n\t\tconst useAnisotropy = material.useAnisotropy === true || material.anisotropy > 0;\n\t\tconst radianceNormalView = useAnisotropy ? transformedBentNormalView : transformedNormalView;\n\n\t\tconst radiance = context( envNode, createRadianceContext( roughness, radianceNormalView ) ).mul( intensity );\n\t\tconst irradiance = context( envNode, createIrradianceContext( transformedNormalWorld ) ).mul( Math.PI ).mul( intensity );\n\n\t\tconst isolateRadiance = cache( radiance );\n\n\t\t//\n\n\t\tbuilder.context.radiance.addAssign( isolateRadiance );\n\n\t\tbuilder.context.iblIrradiance.addAssign( irradiance );\n\n\t\t//\n\n\t\tconst clearcoatRadiance = builder.context.lightingModel.clearcoatRadiance;\n\n\t\tif ( clearcoatRadiance ) {\n\n\t\t\tconst clearcoatRadianceContext = context( envNode, createRadianceContext( clearcoatRoughness, transformedClearcoatNormalView ) ).mul( intensity );\n\t\t\tconst isolateClearcoatRadiance = cache( clearcoatRadianceContext );\n\n\t\t\tclearcoatRadiance.addAssign( isolateClearcoatRadiance );\n\n\t\t}\n\n\t}\n\n}\n\nconst createRadianceContext = ( roughnessNode, normalViewNode ) => {\n\n\tlet reflectVec = null;\n\n\treturn {\n\t\tgetUV: () => {\n\n\t\t\tif ( reflectVec === null ) {\n\n\t\t\t\treflectVec = positionViewDirection.negate().reflect( normalViewNode );\n\n\t\t\t\t// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\n\t\t\t\treflectVec = roughnessNode.mul( roughnessNode ).mix( reflectVec, normalViewNode ).normalize();\n\n\t\t\t\treflectVec = reflectVec.transformDirection( cameraViewMatrix );\n\n\t\t\t}\n\n\t\t\treturn reflectVec;\n\n\t\t},\n\t\tgetTextureLevel: () => {\n\n\t\t\treturn roughnessNode;\n\n\t\t}\n\t};\n\n};\n\nconst createIrradianceContext = ( normalWorldNode ) => {\n\n\treturn {\n\t\tgetUV: () => {\n\n\t\t\treturn normalWorldNode;\n\n\t\t},\n\t\tgetTextureLevel: () => {\n\n\t\t\treturn float( 1.0 );\n\n\t\t}\n\t};\n\n};\n\nexport default EnvironmentNode;\n\naddNodeClass( 'EnvironmentNode', EnvironmentNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}