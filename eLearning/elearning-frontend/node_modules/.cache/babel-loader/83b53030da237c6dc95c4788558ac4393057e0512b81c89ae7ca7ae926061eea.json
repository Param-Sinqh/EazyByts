{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { float, nodeProxy, tslFn } from '../shadernode/ShaderNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { reference } from './ReferenceNode.js';\nimport { positionLocal } from './PositionNode.js';\nimport { normalLocal } from './NormalNode.js';\nimport { textureLoad } from './TextureNode.js';\nimport { instanceIndex, vertexIndex } from '../core/IndexNode.js';\nimport { ivec2, int } from '../shadernode/ShaderNode.js';\nimport { DataArrayTexture, Vector2, Vector4, FloatType } from 'three';\nimport { loop } from '../utils/LoopNode.js';\nconst morphTextures = new WeakMap();\nconst morphVec4 = new Vector4();\nconst getMorph = tslFn(({\n  bufferMap,\n  influence,\n  stride,\n  width,\n  depth,\n  offset\n}) => {\n  const texelIndex = int(vertexIndex).mul(stride).add(offset);\n  const y = texelIndex.div(width);\n  const x = texelIndex.sub(y.mul(width));\n  const bufferAttrib = textureLoad(bufferMap, ivec2(x, y)).depth(depth);\n  return bufferAttrib.mul(influence);\n});\nfunction getEntry(geometry) {\n  const hasMorphPosition = geometry.morphAttributes.position !== undefined;\n  const hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n  const hasMorphColors = geometry.morphAttributes.color !== undefined;\n\n  // instead of using attributes, the WebGL 2 code path encodes morph targets\n  // into an array of data textures. Each layer represents a single morph target.\n\n  const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n  const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;\n  let entry = morphTextures.get(geometry);\n  if (entry === undefined || entry.count !== morphTargetsCount) {\n    if (entry !== undefined) entry.texture.dispose();\n    const morphTargets = geometry.morphAttributes.position || [];\n    const morphNormals = geometry.morphAttributes.normal || [];\n    const morphColors = geometry.morphAttributes.color || [];\n    let vertexDataCount = 0;\n    if (hasMorphPosition === true) vertexDataCount = 1;\n    if (hasMorphNormals === true) vertexDataCount = 2;\n    if (hasMorphColors === true) vertexDataCount = 3;\n    let width = geometry.attributes.position.count * vertexDataCount;\n    let height = 1;\n    const maxTextureSize = 4096; // @TODO: Use 'capabilities.maxTextureSize'\n\n    if (width > maxTextureSize) {\n      height = Math.ceil(width / maxTextureSize);\n      width = maxTextureSize;\n    }\n    const buffer = new Float32Array(width * height * 4 * morphTargetsCount);\n    const bufferTexture = new DataArrayTexture(buffer, width, height, morphTargetsCount);\n    bufferTexture.type = FloatType;\n    bufferTexture.needsUpdate = true;\n\n    // fill buffer\n\n    const vertexDataStride = vertexDataCount * 4;\n    for (let i = 0; i < morphTargetsCount; i++) {\n      const morphTarget = morphTargets[i];\n      const morphNormal = morphNormals[i];\n      const morphColor = morphColors[i];\n      const offset = width * height * 4 * i;\n      for (let j = 0; j < morphTarget.count; j++) {\n        const stride = j * vertexDataStride;\n        if (hasMorphPosition === true) {\n          morphVec4.fromBufferAttribute(morphTarget, j);\n          buffer[offset + stride + 0] = morphVec4.x;\n          buffer[offset + stride + 1] = morphVec4.y;\n          buffer[offset + stride + 2] = morphVec4.z;\n          buffer[offset + stride + 3] = 0;\n        }\n        if (hasMorphNormals === true) {\n          morphVec4.fromBufferAttribute(morphNormal, j);\n          buffer[offset + stride + 4] = morphVec4.x;\n          buffer[offset + stride + 5] = morphVec4.y;\n          buffer[offset + stride + 6] = morphVec4.z;\n          buffer[offset + stride + 7] = 0;\n        }\n        if (hasMorphColors === true) {\n          morphVec4.fromBufferAttribute(morphColor, j);\n          buffer[offset + stride + 8] = morphVec4.x;\n          buffer[offset + stride + 9] = morphVec4.y;\n          buffer[offset + stride + 10] = morphVec4.z;\n          buffer[offset + stride + 11] = morphColor.itemSize === 4 ? morphVec4.w : 1;\n        }\n      }\n    }\n    entry = {\n      count: morphTargetsCount,\n      texture: bufferTexture,\n      stride: vertexDataCount,\n      size: new Vector2(width, height)\n    };\n    morphTextures.set(geometry, entry);\n    function disposeTexture() {\n      bufferTexture.dispose();\n      morphTextures.delete(geometry);\n      geometry.removeEventListener('dispose', disposeTexture);\n    }\n    geometry.addEventListener('dispose', disposeTexture);\n  }\n  return entry;\n}\nclass MorphNode extends Node {\n  constructor(mesh) {\n    super('void');\n    this.mesh = mesh;\n    this.morphBaseInfluence = uniform(1);\n    this.updateType = NodeUpdateType.OBJECT;\n  }\n  setup(builder) {\n    const {\n      geometry\n    } = builder;\n    const hasMorphPosition = geometry.morphAttributes.position !== undefined;\n    const hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n    const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n    const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;\n\n    // nodes\n\n    const {\n      texture: bufferMap,\n      stride,\n      size\n    } = getEntry(geometry);\n    if (hasMorphPosition === true) positionLocal.mulAssign(this.morphBaseInfluence);\n    if (hasMorphNormals === true) normalLocal.mulAssign(this.morphBaseInfluence);\n    const width = int(size.width);\n    loop(morphTargetsCount, ({\n      i\n    }) => {\n      const influence = float(0).toVar();\n      if (this.mesh.isInstancedMesh === true && this.mesh.morphTexture !== null && this.mesh.morphTexture !== undefined) {\n        influence.assign(textureLoad(this.mesh.morphTexture, ivec2(int(i).add(1), int(instanceIndex))).r);\n      } else {\n        influence.assign(reference('morphTargetInfluences', 'float').element(i).toVar());\n      }\n      if (hasMorphPosition === true) {\n        positionLocal.addAssign(getMorph({\n          bufferMap,\n          influence,\n          stride,\n          width,\n          depth: i,\n          offset: int(0)\n        }));\n      }\n      if (hasMorphNormals === true) {\n        normalLocal.addAssign(getMorph({\n          bufferMap,\n          influence,\n          stride,\n          width,\n          depth: i,\n          offset: int(1)\n        }));\n      }\n    });\n  }\n  update() {\n    const morphBaseInfluence = this.morphBaseInfluence;\n    if (this.mesh.geometry.morphTargetsRelative) {\n      morphBaseInfluence.value = 1;\n    } else {\n      morphBaseInfluence.value = 1 - this.mesh.morphTargetInfluences.reduce((a, b) => a + b, 0);\n    }\n  }\n}\nexport default MorphNode;\nexport const morphReference = nodeProxy(MorphNode);\naddNodeClass('MorphNode', MorphNode);","map":{"version":3,"names":["Node","addNodeClass","NodeUpdateType","float","nodeProxy","tslFn","uniform","reference","positionLocal","normalLocal","textureLoad","instanceIndex","vertexIndex","ivec2","int","DataArrayTexture","Vector2","Vector4","FloatType","loop","morphTextures","WeakMap","morphVec4","getMorph","bufferMap","influence","stride","width","depth","offset","texelIndex","mul","add","y","div","x","sub","bufferAttrib","getEntry","geometry","hasMorphPosition","morphAttributes","position","undefined","hasMorphNormals","normal","hasMorphColors","color","morphAttribute","morphTargetsCount","length","entry","get","count","texture","dispose","morphTargets","morphNormals","morphColors","vertexDataCount","attributes","height","maxTextureSize","Math","ceil","buffer","Float32Array","bufferTexture","type","needsUpdate","vertexDataStride","i","morphTarget","morphNormal","morphColor","j","fromBufferAttribute","z","itemSize","w","size","set","disposeTexture","delete","removeEventListener","addEventListener","MorphNode","constructor","mesh","morphBaseInfluence","updateType","OBJECT","setup","builder","mulAssign","toVar","isInstancedMesh","morphTexture","assign","r","element","addAssign","update","morphTargetsRelative","value","morphTargetInfluences","reduce","a","b","morphReference"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/accessors/MorphNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { float, nodeProxy, tslFn } from '../shadernode/ShaderNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { reference } from './ReferenceNode.js';\nimport { positionLocal } from './PositionNode.js';\nimport { normalLocal } from './NormalNode.js';\nimport { textureLoad } from './TextureNode.js';\nimport { instanceIndex, vertexIndex } from '../core/IndexNode.js';\nimport { ivec2, int } from '../shadernode/ShaderNode.js';\nimport { DataArrayTexture, Vector2, Vector4, FloatType } from 'three';\nimport { loop } from '../utils/LoopNode.js';\n\nconst morphTextures = new WeakMap();\nconst morphVec4 = new Vector4();\n\nconst getMorph = tslFn( ( { bufferMap, influence, stride, width, depth, offset } ) => {\n\n\tconst texelIndex = int( vertexIndex ).mul( stride ).add( offset );\n\n\tconst y = texelIndex.div( width );\n\tconst x = texelIndex.sub( y.mul( width ) );\n\n\tconst bufferAttrib = textureLoad( bufferMap, ivec2( x, y ) ).depth( depth );\n\n\treturn bufferAttrib.mul( influence );\n\n} );\n\nfunction getEntry( geometry ) {\n\n\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\n\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n\tconst hasMorphColors = geometry.morphAttributes.color !== undefined;\n\n\t// instead of using attributes, the WebGL 2 code path encodes morph targets\n\t// into an array of data textures. Each layer represents a single morph target.\n\n\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\tlet entry = morphTextures.get( geometry );\n\n\tif ( entry === undefined || entry.count !== morphTargetsCount ) {\n\n\t\tif ( entry !== undefined ) entry.texture.dispose();\n\n\t\tconst morphTargets = geometry.morphAttributes.position || [];\n\t\tconst morphNormals = geometry.morphAttributes.normal || [];\n\t\tconst morphColors = geometry.morphAttributes.color || [];\n\n\t\tlet vertexDataCount = 0;\n\n\t\tif ( hasMorphPosition === true ) vertexDataCount = 1;\n\t\tif ( hasMorphNormals === true ) vertexDataCount = 2;\n\t\tif ( hasMorphColors === true ) vertexDataCount = 3;\n\n\t\tlet width = geometry.attributes.position.count * vertexDataCount;\n\t\tlet height = 1;\n\n\t\tconst maxTextureSize = 4096; // @TODO: Use 'capabilities.maxTextureSize'\n\n\t\tif ( width > maxTextureSize ) {\n\n\t\t\theight = Math.ceil( width / maxTextureSize );\n\t\t\twidth = maxTextureSize;\n\n\t\t}\n\n\t\tconst buffer = new Float32Array( width * height * 4 * morphTargetsCount );\n\n\t\tconst bufferTexture = new DataArrayTexture( buffer, width, height, morphTargetsCount );\n\t\tbufferTexture.type = FloatType;\n\t\tbufferTexture.needsUpdate = true;\n\n\t\t// fill buffer\n\n\t\tconst vertexDataStride = vertexDataCount * 4;\n\n\t\tfor ( let i = 0; i < morphTargetsCount; i ++ ) {\n\n\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\tconst morphNormal = morphNormals[ i ];\n\t\t\tconst morphColor = morphColors[ i ];\n\n\t\t\tconst offset = width * height * 4 * i;\n\n\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\n\n\t\t\t\tconst stride = j * vertexDataStride;\n\n\t\t\t\tif ( hasMorphPosition === true ) {\n\n\t\t\t\t\tmorphVec4.fromBufferAttribute( morphTarget, j );\n\n\t\t\t\t\tbuffer[ offset + stride + 0 ] = morphVec4.x;\n\t\t\t\t\tbuffer[ offset + stride + 1 ] = morphVec4.y;\n\t\t\t\t\tbuffer[ offset + stride + 2 ] = morphVec4.z;\n\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasMorphNormals === true ) {\n\n\t\t\t\t\tmorphVec4.fromBufferAttribute( morphNormal, j );\n\n\t\t\t\t\tbuffer[ offset + stride + 4 ] = morphVec4.x;\n\t\t\t\t\tbuffer[ offset + stride + 5 ] = morphVec4.y;\n\t\t\t\t\tbuffer[ offset + stride + 6 ] = morphVec4.z;\n\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasMorphColors === true ) {\n\n\t\t\t\t\tmorphVec4.fromBufferAttribute( morphColor, j );\n\n\t\t\t\t\tbuffer[ offset + stride + 8 ] = morphVec4.x;\n\t\t\t\t\tbuffer[ offset + stride + 9 ] = morphVec4.y;\n\t\t\t\t\tbuffer[ offset + stride + 10 ] = morphVec4.z;\n\t\t\t\t\tbuffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morphVec4.w : 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tentry = {\n\t\t\tcount: morphTargetsCount,\n\t\t\ttexture: bufferTexture,\n\t\t\tstride: vertexDataCount,\n\t\t\tsize: new Vector2( width, height )\n\t\t};\n\n\t\tmorphTextures.set( geometry, entry );\n\n\t\tfunction disposeTexture() {\n\n\t\t\tbufferTexture.dispose();\n\n\t\t\tmorphTextures.delete( geometry );\n\n\t\t\tgeometry.removeEventListener( 'dispose', disposeTexture );\n\n\t\t}\n\n\t\tgeometry.addEventListener( 'dispose', disposeTexture );\n\n\t}\n\n\treturn entry;\n\n}\n\n\nclass MorphNode extends Node {\n\n\tconstructor( mesh ) {\n\n\t\tsuper( 'void' );\n\n\t\tthis.mesh = mesh;\n\t\tthis.morphBaseInfluence = uniform( 1 );\n\n\t\tthis.updateType = NodeUpdateType.OBJECT;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { geometry } = builder;\n\n\t\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\n\t\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\t// nodes\n\n\t\tconst { texture: bufferMap, stride, size } = getEntry( geometry );\n\n\t\tif ( hasMorphPosition === true ) positionLocal.mulAssign( this.morphBaseInfluence );\n\t\tif ( hasMorphNormals === true ) normalLocal.mulAssign( this.morphBaseInfluence );\n\n\t\tconst width = int( size.width );\n\n\t\tloop( morphTargetsCount, ( { i } ) => {\n\n\t\t\tconst influence = float( 0 ).toVar();\n\n\t\t\tif ( this.mesh.isInstancedMesh === true && ( this.mesh.morphTexture !== null && this.mesh.morphTexture !== undefined ) ) {\n\n\t\t\t\tinfluence.assign( textureLoad( this.mesh.morphTexture, ivec2( int( i ).add( 1 ), int( instanceIndex ) ) ).r );\n\n\t\t\t} else {\n\n\t\t\t\tinfluence.assign( reference( 'morphTargetInfluences', 'float' ).element( i ).toVar() );\n\n\t\t\t}\n\n\t\t\tif ( hasMorphPosition === true ) {\n\n\t\t\t\tpositionLocal.addAssign( getMorph( {\n\t\t\t\t\tbufferMap,\n\t\t\t\t\tinfluence,\n\t\t\t\t\tstride,\n\t\t\t\t\twidth,\n\t\t\t\t\tdepth: i,\n\t\t\t\t\toffset: int( 0 )\n\t\t\t\t} ) );\n\n\t\t\t}\n\n\t\t\tif ( hasMorphNormals === true ) {\n\n\t\t\t\tnormalLocal.addAssign( getMorph( {\n\t\t\t\t\tbufferMap,\n\t\t\t\t\tinfluence,\n\t\t\t\t\tstride,\n\t\t\t\t\twidth,\n\t\t\t\t\tdepth: i,\n\t\t\t\t\toffset: int( 1 )\n\t\t\t\t} ) );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tupdate() {\n\n\t\tconst morphBaseInfluence = this.morphBaseInfluence;\n\n\t\tif ( this.mesh.geometry.morphTargetsRelative ) {\n\n\t\t\tmorphBaseInfluence.value = 1;\n\n\t\t} else {\n\n\t\t\tmorphBaseInfluence.value = 1 - this.mesh.morphTargetInfluences.reduce( ( a, b ) => a + b, 0 );\n\n\t\t}\n\n\t}\n\n}\n\nexport default MorphNode;\n\nexport const morphReference = nodeProxy( MorphNode );\n\naddNodeClass( 'MorphNode', MorphNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}