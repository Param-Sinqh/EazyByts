{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { reference } from './ReferenceNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { normalView } from './NormalNode.js';\nimport { nodeImmutable, float, vec2, mat2 } from '../shadernode/ShaderNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { Vector2 } from 'three';\nconst _propertyCache = new Map();\nclass MaterialNode extends Node {\n  constructor(scope) {\n    super();\n    this.scope = scope;\n  }\n  getCache(property, type) {\n    let node = _propertyCache.get(property);\n    if (node === undefined) {\n      node = materialReference(property, type);\n      _propertyCache.set(property, node);\n    }\n    return node;\n  }\n  getFloat(property) {\n    return this.getCache(property, 'float');\n  }\n  getColor(property) {\n    return this.getCache(property, 'color');\n  }\n  getTexture(property) {\n    return this.getCache(property === 'map' ? 'map' : property + 'Map', 'texture');\n  }\n  setup(builder) {\n    const material = builder.context.material;\n    const scope = this.scope;\n    let node = null;\n    if (scope === MaterialNode.COLOR) {\n      const colorNode = this.getColor(scope);\n      if (material.map && material.map.isTexture === true) {\n        node = colorNode.mul(this.getTexture('map'));\n      } else {\n        node = colorNode;\n      }\n    } else if (scope === MaterialNode.OPACITY) {\n      const opacityNode = this.getFloat(scope);\n      if (material.alphaMap && material.alphaMap.isTexture === true) {\n        node = opacityNode.mul(this.getTexture('alpha'));\n      } else {\n        node = opacityNode;\n      }\n    } else if (scope === MaterialNode.SPECULAR_STRENGTH) {\n      if (material.specularMap && material.specularMap.isTexture === true) {\n        node = this.getTexture('specular').r;\n      } else {\n        node = float(1);\n      }\n    } else if (scope === MaterialNode.SPECULAR_INTENSITY) {\n      const specularIntensity = this.getFloat(scope);\n      if (material.specularMap) {\n        node = specularIntensity.mul(this.getTexture(scope).a);\n      } else {\n        node = specularIntensity;\n      }\n    } else if (scope === MaterialNode.SPECULAR_COLOR) {\n      const specularColorNode = this.getColor(scope);\n      if (material.specularColorMap && material.specularColorMap.isTexture === true) {\n        node = specularColorNode.mul(this.getTexture(scope).rgb);\n      } else {\n        node = specularColorNode;\n      }\n    } else if (scope === MaterialNode.ROUGHNESS) {\n      // TODO: cleanup similar branches\n\n      const roughnessNode = this.getFloat(scope);\n      if (material.roughnessMap && material.roughnessMap.isTexture === true) {\n        node = roughnessNode.mul(this.getTexture(scope).g);\n      } else {\n        node = roughnessNode;\n      }\n    } else if (scope === MaterialNode.METALNESS) {\n      const metalnessNode = this.getFloat(scope);\n      if (material.metalnessMap && material.metalnessMap.isTexture === true) {\n        node = metalnessNode.mul(this.getTexture(scope).b);\n      } else {\n        node = metalnessNode;\n      }\n    } else if (scope === MaterialNode.EMISSIVE) {\n      const emissiveNode = this.getColor(scope);\n      if (material.emissiveMap && material.emissiveMap.isTexture === true) {\n        node = emissiveNode.mul(this.getTexture(scope));\n      } else {\n        node = emissiveNode;\n      }\n    } else if (scope === MaterialNode.NORMAL) {\n      if (material.normalMap) {\n        node = this.getTexture('normal').normalMap(this.getCache('normalScale', 'vec2'));\n      } else if (material.bumpMap) {\n        node = this.getTexture('bump').r.bumpMap(this.getFloat('bumpScale'));\n      } else {\n        node = normalView;\n      }\n    } else if (scope === MaterialNode.CLEARCOAT) {\n      const clearcoatNode = this.getFloat(scope);\n      if (material.clearcoatMap && material.clearcoatMap.isTexture === true) {\n        node = clearcoatNode.mul(this.getTexture(scope).r);\n      } else {\n        node = clearcoatNode;\n      }\n    } else if (scope === MaterialNode.CLEARCOAT_ROUGHNESS) {\n      const clearcoatRoughnessNode = this.getFloat(scope);\n      if (material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true) {\n        node = clearcoatRoughnessNode.mul(this.getTexture(scope).r);\n      } else {\n        node = clearcoatRoughnessNode;\n      }\n    } else if (scope === MaterialNode.CLEARCOAT_NORMAL) {\n      if (material.clearcoatNormalMap) {\n        node = this.getTexture(scope).normalMap(this.getCache(scope + 'Scale', 'vec2'));\n      } else {\n        node = normalView;\n      }\n    } else if (scope === MaterialNode.SHEEN) {\n      const sheenNode = this.getColor('sheenColor').mul(this.getFloat('sheen')); // Move this mul() to CPU\n\n      if (material.sheenColorMap && material.sheenColorMap.isTexture === true) {\n        node = sheenNode.mul(this.getTexture('sheenColor').rgb);\n      } else {\n        node = sheenNode;\n      }\n    } else if (scope === MaterialNode.SHEEN_ROUGHNESS) {\n      const sheenRoughnessNode = this.getFloat(scope);\n      if (material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true) {\n        node = sheenRoughnessNode.mul(this.getTexture(scope).a);\n      } else {\n        node = sheenRoughnessNode;\n      }\n      node = node.clamp(0.07, 1.0);\n    } else if (scope === MaterialNode.ANISOTROPY) {\n      if (material.anisotropyMap && material.anisotropyMap.isTexture === true) {\n        const anisotropyPolar = this.getTexture(scope);\n        const anisotropyMat = mat2(materialAnisotropyVector.x, materialAnisotropyVector.y, materialAnisotropyVector.y.negate(), materialAnisotropyVector.x);\n        node = anisotropyMat.mul(anisotropyPolar.rg.mul(2.0).sub(vec2(1.0)).normalize().mul(anisotropyPolar.b));\n      } else {\n        node = materialAnisotropyVector;\n      }\n    } else if (scope === MaterialNode.IRIDESCENCE_THICKNESS) {\n      const iridescenceThicknessMaximum = reference('1', 'float', material.iridescenceThicknessRange);\n      if (material.iridescenceThicknessMap) {\n        const iridescenceThicknessMinimum = reference('0', 'float', material.iridescenceThicknessRange);\n        node = iridescenceThicknessMaximum.sub(iridescenceThicknessMinimum).mul(this.getTexture(scope).g).add(iridescenceThicknessMinimum);\n      } else {\n        node = iridescenceThicknessMaximum;\n      }\n    } else if (scope === MaterialNode.TRANSMISSION) {\n      const transmissionNode = this.getFloat(scope);\n      if (material.transmissionMap) {\n        node = transmissionNode.mul(this.getTexture(scope).r);\n      } else {\n        node = transmissionNode;\n      }\n    } else if (scope === MaterialNode.THICKNESS) {\n      const thicknessNode = this.getFloat(scope);\n      if (material.thicknessMap) {\n        node = thicknessNode.mul(this.getTexture(scope).g);\n      } else {\n        node = thicknessNode;\n      }\n    } else if (scope === MaterialNode.IOR) {\n      node = this.getFloat(scope);\n    } else {\n      const outputType = this.getNodeType(builder);\n      node = this.getCache(scope, outputType);\n    }\n    return node;\n  }\n}\nMaterialNode.ALPHA_TEST = 'alphaTest';\nMaterialNode.COLOR = 'color';\nMaterialNode.OPACITY = 'opacity';\nMaterialNode.SHININESS = 'shininess';\nMaterialNode.SPECULAR = 'specular';\nMaterialNode.SPECULAR_STRENGTH = 'specularStrength';\nMaterialNode.SPECULAR_INTENSITY = 'specularIntensity';\nMaterialNode.SPECULAR_COLOR = 'specularColor';\nMaterialNode.REFLECTIVITY = 'reflectivity';\nMaterialNode.ROUGHNESS = 'roughness';\nMaterialNode.METALNESS = 'metalness';\nMaterialNode.NORMAL = 'normal';\nMaterialNode.CLEARCOAT = 'clearcoat';\nMaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\nMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\nMaterialNode.EMISSIVE = 'emissive';\nMaterialNode.ROTATION = 'rotation';\nMaterialNode.SHEEN = 'sheen';\nMaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\nMaterialNode.ANISOTROPY = 'anisotropy';\nMaterialNode.IRIDESCENCE = 'iridescence';\nMaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\nMaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\nMaterialNode.IOR = 'ior';\nMaterialNode.TRANSMISSION = 'transmission';\nMaterialNode.THICKNESS = 'thickness';\nMaterialNode.ATTENUATION_DISTANCE = 'attenuationDistance';\nMaterialNode.ATTENUATION_COLOR = 'attenuationColor';\nMaterialNode.LINE_SCALE = 'scale';\nMaterialNode.LINE_DASH_SIZE = 'dashSize';\nMaterialNode.LINE_GAP_SIZE = 'gapSize';\nMaterialNode.LINE_WIDTH = 'linewidth';\nMaterialNode.LINE_DASH_OFFSET = 'dashOffset';\nMaterialNode.POINT_WIDTH = 'pointWidth';\nMaterialNode.DISPERSION = 'dispersion';\nexport default MaterialNode;\nexport const materialAlphaTest = nodeImmutable(MaterialNode, MaterialNode.ALPHA_TEST);\nexport const materialColor = nodeImmutable(MaterialNode, MaterialNode.COLOR);\nexport const materialShininess = nodeImmutable(MaterialNode, MaterialNode.SHININESS);\nexport const materialEmissive = nodeImmutable(MaterialNode, MaterialNode.EMISSIVE);\nexport const materialOpacity = nodeImmutable(MaterialNode, MaterialNode.OPACITY);\nexport const materialSpecular = nodeImmutable(MaterialNode, MaterialNode.SPECULAR);\nexport const materialSpecularIntensity = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_INTENSITY);\nexport const materialSpecularColor = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_COLOR);\nexport const materialSpecularStrength = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_STRENGTH);\nexport const materialReflectivity = nodeImmutable(MaterialNode, MaterialNode.REFLECTIVITY);\nexport const materialRoughness = nodeImmutable(MaterialNode, MaterialNode.ROUGHNESS);\nexport const materialMetalness = nodeImmutable(MaterialNode, MaterialNode.METALNESS);\nexport const materialNormal = nodeImmutable(MaterialNode, MaterialNode.NORMAL);\nexport const materialClearcoat = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT);\nexport const materialClearcoatRoughness = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS);\nexport const materialClearcoatNormal = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_NORMAL);\nexport const materialRotation = nodeImmutable(MaterialNode, MaterialNode.ROTATION);\nexport const materialSheen = nodeImmutable(MaterialNode, MaterialNode.SHEEN);\nexport const materialSheenRoughness = nodeImmutable(MaterialNode, MaterialNode.SHEEN_ROUGHNESS);\nexport const materialAnisotropy = nodeImmutable(MaterialNode, MaterialNode.ANISOTROPY);\nexport const materialIridescence = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE);\nexport const materialIridescenceIOR = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_IOR);\nexport const materialIridescenceThickness = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS);\nexport const materialTransmission = nodeImmutable(MaterialNode, MaterialNode.TRANSMISSION);\nexport const materialThickness = nodeImmutable(MaterialNode, MaterialNode.THICKNESS);\nexport const materialIOR = nodeImmutable(MaterialNode, MaterialNode.IOR);\nexport const materialAttenuationDistance = nodeImmutable(MaterialNode, MaterialNode.ATTENUATION_DISTANCE);\nexport const materialAttenuationColor = nodeImmutable(MaterialNode, MaterialNode.ATTENUATION_COLOR);\nexport const materialLineScale = nodeImmutable(MaterialNode, MaterialNode.LINE_SCALE);\nexport const materialLineDashSize = nodeImmutable(MaterialNode, MaterialNode.LINE_DASH_SIZE);\nexport const materialLineGapSize = nodeImmutable(MaterialNode, MaterialNode.LINE_GAP_SIZE);\nexport const materialLineWidth = nodeImmutable(MaterialNode, MaterialNode.LINE_WIDTH);\nexport const materialLineDashOffset = nodeImmutable(MaterialNode, MaterialNode.LINE_DASH_OFFSET);\nexport const materialPointWidth = nodeImmutable(MaterialNode, MaterialNode.POINT_WIDTH);\nexport const materialDispersion = nodeImmutable(MaterialNode, MaterialNode.DISPERSION);\nexport const materialAnisotropyVector = uniform(new Vector2()).onReference(function (frame) {\n  return frame.material;\n}).onRenderUpdate(function ({\n  material\n}) {\n  this.value.set(material.anisotropy * Math.cos(material.anisotropyRotation), material.anisotropy * Math.sin(material.anisotropyRotation));\n});\naddNodeClass('MaterialNode', MaterialNode);","map":{"version":3,"names":["Node","addNodeClass","reference","materialReference","normalView","nodeImmutable","float","vec2","mat2","uniform","Vector2","_propertyCache","Map","MaterialNode","constructor","scope","getCache","property","type","node","get","undefined","set","getFloat","getColor","getTexture","setup","builder","material","context","COLOR","colorNode","map","isTexture","mul","OPACITY","opacityNode","alphaMap","SPECULAR_STRENGTH","specularMap","r","SPECULAR_INTENSITY","specularIntensity","a","SPECULAR_COLOR","specularColorNode","specularColorMap","rgb","ROUGHNESS","roughnessNode","roughnessMap","g","METALNESS","metalnessNode","metalnessMap","b","EMISSIVE","emissiveNode","emissiveMap","NORMAL","normalMap","bumpMap","CLEARCOAT","clearcoatNode","clearcoatMap","CLEARCOAT_ROUGHNESS","clearcoatRoughnessNode","clearcoatRoughnessMap","CLEARCOAT_NORMAL","clearcoatNormalMap","SHEEN","sheenNode","sheenColorMap","SHEEN_ROUGHNESS","sheenRoughnessNode","sheenRoughnessMap","clamp","ANISOTROPY","anisotropyMap","anisotropyPolar","anisotropyMat","materialAnisotropyVector","x","y","negate","rg","sub","normalize","IRIDESCENCE_THICKNESS","iridescenceThicknessMaximum","iridescenceThicknessRange","iridescenceThicknessMap","iridescenceThicknessMinimum","add","TRANSMISSION","transmissionNode","transmissionMap","THICKNESS","thicknessNode","thicknessMap","IOR","outputType","getNodeType","ALPHA_TEST","SHININESS","SPECULAR","REFLECTIVITY","ROTATION","IRIDESCENCE","IRIDESCENCE_IOR","ATTENUATION_DISTANCE","ATTENUATION_COLOR","LINE_SCALE","LINE_DASH_SIZE","LINE_GAP_SIZE","LINE_WIDTH","LINE_DASH_OFFSET","POINT_WIDTH","DISPERSION","materialAlphaTest","materialColor","materialShininess","materialEmissive","materialOpacity","materialSpecular","materialSpecularIntensity","materialSpecularColor","materialSpecularStrength","materialReflectivity","materialRoughness","materialMetalness","materialNormal","materialClearcoat","materialClearcoatRoughness","materialClearcoatNormal","materialRotation","materialSheen","materialSheenRoughness","materialAnisotropy","materialIridescence","materialIridescenceIOR","materialIridescenceThickness","materialTransmission","materialThickness","materialIOR","materialAttenuationDistance","materialAttenuationColor","materialLineScale","materialLineDashSize","materialLineGapSize","materialLineWidth","materialLineDashOffset","materialPointWidth","materialDispersion","onReference","frame","onRenderUpdate","value","anisotropy","Math","cos","anisotropyRotation","sin"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/accessors/MaterialNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { reference } from './ReferenceNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { normalView } from './NormalNode.js';\nimport { nodeImmutable, float, vec2, mat2 } from '../shadernode/ShaderNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { Vector2 } from 'three';\n\nconst _propertyCache = new Map();\n\nclass MaterialNode extends Node {\n\n\tconstructor( scope ) {\n\n\t\tsuper();\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tgetCache( property, type ) {\n\n\t\tlet node = _propertyCache.get( property );\n\n\t\tif ( node === undefined ) {\n\n\t\t\tnode = materialReference( property, type );\n\n\t\t\t_propertyCache.set( property, node );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\tgetFloat( property ) {\n\n\t\treturn this.getCache( property, 'float' );\n\n\t}\n\n\tgetColor( property ) {\n\n\t\treturn this.getCache( property, 'color' );\n\n\t}\n\n\tgetTexture( property ) {\n\n\t\treturn this.getCache( property === 'map' ? 'map' : property + 'Map', 'texture' );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst material = builder.context.material;\n\t\tconst scope = this.scope;\n\n\t\tlet node = null;\n\n\t\tif ( scope === MaterialNode.COLOR ) {\n\n\t\t\tconst colorNode = this.getColor( scope );\n\n\t\t\tif ( material.map && material.map.isTexture === true ) {\n\n\t\t\t\tnode = colorNode.mul( this.getTexture( 'map' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = colorNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.OPACITY ) {\n\n\t\t\tconst opacityNode = this.getFloat( scope );\n\n\t\t\tif ( material.alphaMap && material.alphaMap.isTexture === true ) {\n\n\t\t\t\tnode = opacityNode.mul( this.getTexture( 'alpha' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = opacityNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SPECULAR_STRENGTH ) {\n\n\t\t\tif ( material.specularMap && material.specularMap.isTexture === true ) {\n\n\t\t\t\tnode = this.getTexture( 'specular' ).r;\n\n\t\t\t} else {\n\n\t\t\t\tnode = float( 1 );\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SPECULAR_INTENSITY ) {\n\n\t\t\tconst specularIntensity = this.getFloat( scope );\n\n\t\t\tif ( material.specularMap ) {\n\n\t\t\t\tnode = specularIntensity.mul( this.getTexture( scope ).a );\n\n\t\t\t} else {\n\n\t\t\t\tnode = specularIntensity;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SPECULAR_COLOR ) {\n\n\t\t\tconst specularColorNode = this.getColor( scope );\n\n\t\t\tif ( material.specularColorMap && material.specularColorMap.isTexture === true ) {\n\n\t\t\t\tnode = specularColorNode.mul( this.getTexture( scope ).rgb );\n\n\t\t\t} else {\n\n\t\t\t\tnode = specularColorNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.ROUGHNESS ) { // TODO: cleanup similar branches\n\n\t\t\tconst roughnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.roughnessMap && material.roughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = roughnessNode.mul( this.getTexture( scope ).g );\n\n\t\t\t} else {\n\n\t\t\t\tnode = roughnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.METALNESS ) {\n\n\t\t\tconst metalnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.metalnessMap && material.metalnessMap.isTexture === true ) {\n\n\t\t\t\tnode = metalnessNode.mul( this.getTexture( scope ).b );\n\n\t\t\t} else {\n\n\t\t\t\tnode = metalnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\n\n\t\t\tconst emissiveNode = this.getColor( scope );\n\n\t\t\tif ( material.emissiveMap && material.emissiveMap.isTexture === true ) {\n\n\t\t\t\tnode = emissiveNode.mul( this.getTexture( scope ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = emissiveNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.NORMAL ) {\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tnode = this.getTexture( 'normal' ).normalMap( this.getCache( 'normalScale', 'vec2' ) );\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tnode = this.getTexture( 'bump' ).r.bumpMap( this.getFloat( 'bumpScale' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = normalView;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT ) {\n\n\t\t\tconst clearcoatNode = this.getFloat( scope );\n\n\t\t\tif ( material.clearcoatMap && material.clearcoatMap.isTexture === true ) {\n\n\t\t\t\tnode = clearcoatNode.mul( this.getTexture( scope ).r );\n\n\t\t\t} else {\n\n\t\t\t\tnode = clearcoatNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_ROUGHNESS ) {\n\n\t\t\tconst clearcoatRoughnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = clearcoatRoughnessNode.mul( this.getTexture( scope ).r );\n\n\t\t\t} else {\n\n\t\t\t\tnode = clearcoatRoughnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_NORMAL ) {\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tnode = this.getTexture( scope ).normalMap( this.getCache( scope + 'Scale', 'vec2' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = normalView;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SHEEN ) {\n\n\t\t\tconst sheenNode = this.getColor( 'sheenColor' ).mul( this.getFloat( 'sheen' ) ); // Move this mul() to CPU\n\n\t\t\tif ( material.sheenColorMap && material.sheenColorMap.isTexture === true ) {\n\n\t\t\t\tnode = sheenNode.mul( this.getTexture( 'sheenColor' ).rgb );\n\n\t\t\t} else {\n\n\t\t\t\tnode = sheenNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SHEEN_ROUGHNESS ) {\n\n\t\t\tconst sheenRoughnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = sheenRoughnessNode.mul( this.getTexture( scope ).a );\n\n\t\t\t} else {\n\n\t\t\t\tnode = sheenRoughnessNode;\n\n\t\t\t}\n\n\t\t\tnode = node.clamp( 0.07, 1.0 );\n\n\t\t} else if ( scope === MaterialNode.ANISOTROPY ) {\n\n\t\t\tif ( material.anisotropyMap && material.anisotropyMap.isTexture === true ) {\n\n\t\t\t\tconst anisotropyPolar = this.getTexture( scope );\n\t\t\t\tconst anisotropyMat = mat2( materialAnisotropyVector.x, materialAnisotropyVector.y, materialAnisotropyVector.y.negate(), materialAnisotropyVector.x );\n\n\t\t\t\tnode = anisotropyMat.mul( anisotropyPolar.rg.mul( 2.0 ).sub( vec2( 1.0 ) ).normalize().mul( anisotropyPolar.b ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = materialAnisotropyVector;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.IRIDESCENCE_THICKNESS ) {\n\n\t\t\tconst iridescenceThicknessMaximum = reference( '1', 'float', material.iridescenceThicknessRange );\n\n\t\t\tif ( material.iridescenceThicknessMap ) {\n\n\t\t\t\tconst iridescenceThicknessMinimum = reference( '0', 'float', material.iridescenceThicknessRange );\n\n\t\t\t\tnode = iridescenceThicknessMaximum.sub( iridescenceThicknessMinimum ).mul( this.getTexture( scope ).g ).add( iridescenceThicknessMinimum );\n\n\t\t\t} else {\n\n\t\t\t\tnode = iridescenceThicknessMaximum;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.TRANSMISSION ) {\n\n\t\t\tconst transmissionNode = this.getFloat( scope );\n\n\t\t\tif ( material.transmissionMap ) {\n\n\t\t\t\tnode = transmissionNode.mul( this.getTexture( scope ).r );\n\n\t\t\t} else {\n\n\t\t\t\tnode = transmissionNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.THICKNESS ) {\n\n\t\t\tconst thicknessNode = this.getFloat( scope );\n\n\t\t\tif ( material.thicknessMap ) {\n\n\t\t\t\tnode = thicknessNode.mul( this.getTexture( scope ).g );\n\n\t\t\t} else {\n\n\t\t\t\tnode = thicknessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.IOR ) {\n\n\t\t\tnode = this.getFloat( scope );\n\n\t\t} else {\n\n\t\t\tconst outputType = this.getNodeType( builder );\n\n\t\t\tnode = this.getCache( scope, outputType );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n}\n\nMaterialNode.ALPHA_TEST = 'alphaTest';\nMaterialNode.COLOR = 'color';\nMaterialNode.OPACITY = 'opacity';\nMaterialNode.SHININESS = 'shininess';\nMaterialNode.SPECULAR = 'specular';\nMaterialNode.SPECULAR_STRENGTH = 'specularStrength';\nMaterialNode.SPECULAR_INTENSITY = 'specularIntensity';\nMaterialNode.SPECULAR_COLOR = 'specularColor';\nMaterialNode.REFLECTIVITY = 'reflectivity';\nMaterialNode.ROUGHNESS = 'roughness';\nMaterialNode.METALNESS = 'metalness';\nMaterialNode.NORMAL = 'normal';\nMaterialNode.CLEARCOAT = 'clearcoat';\nMaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\nMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\nMaterialNode.EMISSIVE = 'emissive';\nMaterialNode.ROTATION = 'rotation';\nMaterialNode.SHEEN = 'sheen';\nMaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\nMaterialNode.ANISOTROPY = 'anisotropy';\nMaterialNode.IRIDESCENCE = 'iridescence';\nMaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\nMaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\nMaterialNode.IOR = 'ior';\nMaterialNode.TRANSMISSION = 'transmission';\nMaterialNode.THICKNESS = 'thickness';\nMaterialNode.ATTENUATION_DISTANCE = 'attenuationDistance';\nMaterialNode.ATTENUATION_COLOR = 'attenuationColor';\nMaterialNode.LINE_SCALE = 'scale';\nMaterialNode.LINE_DASH_SIZE = 'dashSize';\nMaterialNode.LINE_GAP_SIZE = 'gapSize';\nMaterialNode.LINE_WIDTH = 'linewidth';\nMaterialNode.LINE_DASH_OFFSET = 'dashOffset';\nMaterialNode.POINT_WIDTH = 'pointWidth';\nMaterialNode.DISPERSION = 'dispersion';\n\nexport default MaterialNode;\n\nexport const materialAlphaTest = nodeImmutable( MaterialNode, MaterialNode.ALPHA_TEST );\nexport const materialColor = nodeImmutable( MaterialNode, MaterialNode.COLOR );\nexport const materialShininess = nodeImmutable( MaterialNode, MaterialNode.SHININESS );\nexport const materialEmissive = nodeImmutable( MaterialNode, MaterialNode.EMISSIVE );\nexport const materialOpacity = nodeImmutable( MaterialNode, MaterialNode.OPACITY );\nexport const materialSpecular = nodeImmutable( MaterialNode, MaterialNode.SPECULAR );\n\nexport const materialSpecularIntensity = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_INTENSITY );\nexport const materialSpecularColor = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_COLOR );\n\nexport const materialSpecularStrength = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_STRENGTH );\nexport const materialReflectivity = nodeImmutable( MaterialNode, MaterialNode.REFLECTIVITY );\nexport const materialRoughness = nodeImmutable( MaterialNode, MaterialNode.ROUGHNESS );\nexport const materialMetalness = nodeImmutable( MaterialNode, MaterialNode.METALNESS );\nexport const materialNormal = nodeImmutable( MaterialNode, MaterialNode.NORMAL );\nexport const materialClearcoat = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT );\nexport const materialClearcoatRoughness = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS );\nexport const materialClearcoatNormal = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_NORMAL );\nexport const materialRotation = nodeImmutable( MaterialNode, MaterialNode.ROTATION );\nexport const materialSheen = nodeImmutable( MaterialNode, MaterialNode.SHEEN );\nexport const materialSheenRoughness = nodeImmutable( MaterialNode, MaterialNode.SHEEN_ROUGHNESS );\nexport const materialAnisotropy = nodeImmutable( MaterialNode, MaterialNode.ANISOTROPY );\nexport const materialIridescence = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE );\nexport const materialIridescenceIOR = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_IOR );\nexport const materialIridescenceThickness = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS );\nexport const materialTransmission = nodeImmutable( MaterialNode, MaterialNode.TRANSMISSION );\nexport const materialThickness = nodeImmutable( MaterialNode, MaterialNode.THICKNESS );\nexport const materialIOR = nodeImmutable( MaterialNode, MaterialNode.IOR );\nexport const materialAttenuationDistance = nodeImmutable( MaterialNode, MaterialNode.ATTENUATION_DISTANCE );\nexport const materialAttenuationColor = nodeImmutable( MaterialNode, MaterialNode.ATTENUATION_COLOR );\nexport const materialLineScale = nodeImmutable( MaterialNode, MaterialNode.LINE_SCALE );\nexport const materialLineDashSize = nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_SIZE );\nexport const materialLineGapSize = nodeImmutable( MaterialNode, MaterialNode.LINE_GAP_SIZE );\nexport const materialLineWidth = nodeImmutable( MaterialNode, MaterialNode.LINE_WIDTH );\nexport const materialLineDashOffset = nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_OFFSET );\nexport const materialPointWidth = nodeImmutable( MaterialNode, MaterialNode.POINT_WIDTH );\nexport const materialDispersion = nodeImmutable( MaterialNode, MaterialNode.DISPERSION );\nexport const materialAnisotropyVector = uniform( new Vector2() ).onReference( function ( frame ) {\n\n\treturn frame.material;\n\n} ).onRenderUpdate( function ( { material } ) {\n\n\tthis.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );\n\n} );\n\naddNodeClass( 'MaterialNode', MaterialNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}