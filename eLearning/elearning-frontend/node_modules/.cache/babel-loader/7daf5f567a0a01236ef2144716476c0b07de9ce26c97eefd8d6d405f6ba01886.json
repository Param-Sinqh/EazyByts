{"ast":null,"code":"import Node from '../core/Node.js';\nimport AnalyticLightNode from './AnalyticLightNode.js';\nimport { nodeObject, nodeProxy, vec3 } from '../shadernode/ShaderNode.js';\nconst LightNodes = new WeakMap();\nconst sortLights = lights => {\n  return lights.sort((a, b) => a.id - b.id);\n};\nclass LightsNode extends Node {\n  constructor(lightNodes = []) {\n    super('vec3');\n    this.totalDiffuseNode = vec3().temp('totalDiffuse');\n    this.totalSpecularNode = vec3().temp('totalSpecular');\n    this.outgoingLightNode = vec3().temp('outgoingLight');\n    this.lightNodes = lightNodes;\n    this._hash = null;\n  }\n  get hasLight() {\n    return this.lightNodes.length > 0;\n  }\n  getHash() {\n    if (this._hash === null) {\n      const hash = [];\n      for (const lightNode of this.lightNodes) {\n        hash.push(lightNode.getHash());\n      }\n      this._hash = 'lights-' + hash.join(',');\n    }\n    return this._hash;\n  }\n  analyze(builder) {\n    const properties = builder.getDataFromNode(this);\n    for (const node of properties.nodes) {\n      node.build(builder);\n    }\n  }\n  setup(builder) {\n    const context = builder.context;\n    const lightingModel = context.lightingModel;\n    let outgoingLightNode = this.outgoingLightNode;\n    if (lightingModel) {\n      const {\n        lightNodes,\n        totalDiffuseNode,\n        totalSpecularNode\n      } = this;\n      context.outgoingLight = outgoingLightNode;\n      const stack = builder.addStack();\n\n      //\n\n      const properties = builder.getDataFromNode(this);\n      properties.nodes = stack.nodes;\n\n      //\n\n      lightingModel.start(context, stack, builder);\n\n      // lights\n\n      for (const lightNode of lightNodes) {\n        lightNode.build(builder);\n      }\n\n      //\n\n      lightingModel.indirectDiffuse(context, stack, builder);\n      lightingModel.indirectSpecular(context, stack, builder);\n      lightingModel.ambientOcclusion(context, stack, builder);\n\n      //\n\n      const {\n        backdrop,\n        backdropAlpha\n      } = context;\n      const {\n        directDiffuse,\n        directSpecular,\n        indirectDiffuse,\n        indirectSpecular\n      } = context.reflectedLight;\n      let totalDiffuse = directDiffuse.add(indirectDiffuse);\n      if (backdrop !== null) {\n        if (backdropAlpha !== null) {\n          totalDiffuse = vec3(backdropAlpha.mix(totalDiffuse, backdrop));\n        } else {\n          totalDiffuse = vec3(backdrop);\n        }\n        context.material.transparent = true;\n      }\n      totalDiffuseNode.assign(totalDiffuse);\n      totalSpecularNode.assign(directSpecular.add(indirectSpecular));\n      outgoingLightNode.assign(totalDiffuseNode.add(totalSpecularNode));\n\n      //\n\n      lightingModel.finish(context, stack, builder);\n\n      //\n\n      outgoingLightNode = outgoingLightNode.bypass(builder.removeStack());\n    }\n    return outgoingLightNode;\n  }\n  _getLightNodeById(id) {\n    for (const lightNode of this.lightNodes) {\n      if (lightNode.isAnalyticLightNode && lightNode.light.id === id) {\n        return lightNode;\n      }\n    }\n    return null;\n  }\n  fromLights(lights = []) {\n    const lightNodes = [];\n    lights = sortLights(lights);\n    for (const light of lights) {\n      let lightNode = this._getLightNodeById(light.id);\n      if (lightNode === null) {\n        const lightClass = light.constructor;\n        const lightNodeClass = LightNodes.has(lightClass) ? LightNodes.get(lightClass) : AnalyticLightNode;\n        lightNode = nodeObject(new lightNodeClass(light));\n      }\n      lightNodes.push(lightNode);\n    }\n    this.lightNodes = lightNodes;\n    this._hash = null;\n    return this;\n  }\n}\nexport default LightsNode;\nexport const lights = lights => nodeObject(new LightsNode().fromLights(lights));\nexport const lightsNode = nodeProxy(LightsNode);\nexport function addLightNode(lightClass, lightNodeClass) {\n  if (LightNodes.has(lightClass)) {\n    console.warn(`Redefinition of light node ${lightNodeClass.type}`);\n    return;\n  }\n  if (typeof lightClass !== 'function') throw new Error(`Light ${lightClass.name} is not a class`);\n  if (typeof lightNodeClass !== 'function' || !lightNodeClass.type) throw new Error(`Light node ${lightNodeClass.type} is not a class`);\n  LightNodes.set(lightClass, lightNodeClass);\n}","map":{"version":3,"names":["Node","AnalyticLightNode","nodeObject","nodeProxy","vec3","LightNodes","WeakMap","sortLights","lights","sort","a","b","id","LightsNode","constructor","lightNodes","totalDiffuseNode","temp","totalSpecularNode","outgoingLightNode","_hash","hasLight","length","getHash","hash","lightNode","push","join","analyze","builder","properties","getDataFromNode","node","nodes","build","setup","context","lightingModel","outgoingLight","stack","addStack","start","indirectDiffuse","indirectSpecular","ambientOcclusion","backdrop","backdropAlpha","directDiffuse","directSpecular","reflectedLight","totalDiffuse","add","mix","material","transparent","assign","finish","bypass","removeStack","_getLightNodeById","isAnalyticLightNode","light","fromLights","lightClass","lightNodeClass","has","get","lightsNode","addLightNode","console","warn","type","Error","name","set"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/lighting/LightsNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport AnalyticLightNode from './AnalyticLightNode.js';\nimport { nodeObject, nodeProxy, vec3 } from '../shadernode/ShaderNode.js';\n\nconst LightNodes = new WeakMap();\n\nconst sortLights = ( lights ) => {\n\n\treturn lights.sort( ( a, b ) => a.id - b.id );\n\n};\n\nclass LightsNode extends Node {\n\n\tconstructor( lightNodes = [] ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.totalDiffuseNode = vec3().temp( 'totalDiffuse' );\n\t\tthis.totalSpecularNode = vec3().temp( 'totalSpecular' );\n\n\t\tthis.outgoingLightNode = vec3().temp( 'outgoingLight' );\n\n\t\tthis.lightNodes = lightNodes;\n\n\t\tthis._hash = null;\n\n\t}\n\n\tget hasLight() {\n\n\t\treturn this.lightNodes.length > 0;\n\n\t}\n\n\tgetHash() {\n\n\t\tif ( this._hash === null ) {\n\n\t\t\tconst hash = [];\n\n\t\t\tfor ( const lightNode of this.lightNodes ) {\n\n\t\t\t\thash.push( lightNode.getHash() );\n\n\t\t\t}\n\n\t\t\tthis._hash = 'lights-' + hash.join( ',' );\n\n\t\t}\n\n\t\treturn this._hash;\n\n\t}\n\n\tanalyze( builder ) {\n\n\t\tconst properties = builder.getDataFromNode( this );\n\n\t\tfor ( const node of properties.nodes ) {\n\n\t\t\tnode.build( builder );\n\n\t\t}\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst context = builder.context;\n\t\tconst lightingModel = context.lightingModel;\n\n\t\tlet outgoingLightNode = this.outgoingLightNode;\n\n\t\tif ( lightingModel ) {\n\n\t\t\tconst { lightNodes, totalDiffuseNode, totalSpecularNode } = this;\n\n\t\t\tcontext.outgoingLight = outgoingLightNode;\n\n\t\t\tconst stack = builder.addStack();\n\n\t\t\t//\n\n\t\t\tconst properties = builder.getDataFromNode( this );\n\t\t\tproperties.nodes = stack.nodes;\n\n\t\t\t//\n\n\t\t\tlightingModel.start( context, stack, builder );\n\n\t\t\t// lights\n\n\t\t\tfor ( const lightNode of lightNodes ) {\n\n\t\t\t\tlightNode.build( builder );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlightingModel.indirectDiffuse( context, stack, builder );\n\t\t\tlightingModel.indirectSpecular( context, stack, builder );\n\t\t\tlightingModel.ambientOcclusion( context, stack, builder );\n\n\t\t\t//\n\n\t\t\tconst { backdrop, backdropAlpha } = context;\n\t\t\tconst { directDiffuse, directSpecular, indirectDiffuse, indirectSpecular } = context.reflectedLight;\n\n\t\t\tlet totalDiffuse = directDiffuse.add( indirectDiffuse );\n\n\t\t\tif ( backdrop !== null ) {\n\n\t\t\t\tif ( backdropAlpha !== null ) {\n\n\t\t\t\t\ttotalDiffuse = vec3( backdropAlpha.mix( totalDiffuse, backdrop ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttotalDiffuse = vec3( backdrop );\n\n\t\t\t\t}\n\n\t\t\t\tcontext.material.transparent = true;\n\n\t\t\t}\n\n\t\t\ttotalDiffuseNode.assign( totalDiffuse );\n\t\t\ttotalSpecularNode.assign( directSpecular.add( indirectSpecular ) );\n\n\t\t\toutgoingLightNode.assign( totalDiffuseNode.add( totalSpecularNode ) );\n\n\t\t\t//\n\n\t\t\tlightingModel.finish( context, stack, builder );\n\n\t\t\t//\n\n\t\t\toutgoingLightNode = outgoingLightNode.bypass( builder.removeStack() );\n\n\t\t}\n\n\t\treturn outgoingLightNode;\n\n\t}\n\n\t_getLightNodeById( id ) {\n\n\t\tfor ( const lightNode of this.lightNodes ) {\n\n\t\t\tif ( lightNode.isAnalyticLightNode && lightNode.light.id === id ) {\n\n\t\t\t\treturn lightNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tfromLights( lights = [] ) {\n\n\t\tconst lightNodes = [];\n\n\t\tlights = sortLights( lights );\n\n\t\tfor ( const light of lights ) {\n\n\t\t\tlet lightNode = this._getLightNodeById( light.id );\n\n\t\t\tif ( lightNode === null ) {\n\n\t\t\t\tconst lightClass = light.constructor;\n\t\t\t\tconst lightNodeClass = LightNodes.has( lightClass ) ? LightNodes.get( lightClass ) : AnalyticLightNode;\n\n\t\t\t\tlightNode = nodeObject( new lightNodeClass( light ) );\n\n\t\t\t}\n\n\t\t\tlightNodes.push( lightNode );\n\n\t\t}\n\n\t\tthis.lightNodes = lightNodes;\n\t\tthis._hash = null;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport default LightsNode;\n\nexport const lights = ( lights ) => nodeObject( new LightsNode().fromLights( lights ) );\nexport const lightsNode = nodeProxy( LightsNode );\n\nexport function addLightNode( lightClass, lightNodeClass ) {\n\n\tif ( LightNodes.has( lightClass ) ) {\n\n\t\tconsole.warn( `Redefinition of light node ${ lightNodeClass.type }` );\n\t\treturn;\n\n\t}\n\n\tif ( typeof lightClass !== 'function' ) throw new Error( `Light ${ lightClass.name } is not a class` );\n\tif ( typeof lightNodeClass !== 'function' || ! lightNodeClass.type ) throw new Error( `Light node ${ lightNodeClass.type } is not a class` );\n\n\tLightNodes.set( lightClass, lightNodeClass );\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}