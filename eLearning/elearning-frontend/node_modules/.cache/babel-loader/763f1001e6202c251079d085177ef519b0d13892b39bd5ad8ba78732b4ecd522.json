{"ast":null,"code":"import TempNode from '../core/TempNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, tslFn, nodeObject, float, mat3, vec3 } from '../shadernode/ShaderNode.js';\nimport { rendererReference } from '../accessors/RendererReferenceNode.js';\nimport { clamp, log2, max, pow } from '../math/MathNode.js';\nimport { mul } from '../math/OperatorNode.js';\nimport { NoToneMapping, LinearToneMapping, ReinhardToneMapping, CineonToneMapping, ACESFilmicToneMapping, AgXToneMapping } from 'three';\n\n// exposure only\nconst LinearToneMappingNode = tslFn(({\n  color,\n  exposure\n}) => {\n  return color.mul(exposure).clamp();\n});\n\n// source: https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf\nconst ReinhardToneMappingNode = tslFn(({\n  color,\n  exposure\n}) => {\n  color = color.mul(exposure);\n  return color.div(color.add(1.0)).clamp();\n});\n\n// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/\nconst OptimizedCineonToneMappingNode = tslFn(({\n  color,\n  exposure\n}) => {\n  // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n  color = color.mul(exposure);\n  color = color.sub(0.004).max(0.0);\n  const a = color.mul(color.mul(6.2).add(0.5));\n  const b = color.mul(color.mul(6.2).add(1.7)).add(0.06);\n  return a.div(b).pow(2.2);\n});\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\nconst RRTAndODTFit = tslFn(({\n  color\n}) => {\n  const a = color.mul(color.add(0.0245786)).sub(0.000090537);\n  const b = color.mul(color.add(0.4329510).mul(0.983729)).add(0.238081);\n  return a.div(b);\n});\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\nconst ACESFilmicToneMappingNode = tslFn(({\n  color,\n  exposure\n}) => {\n  // sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n  const ACESInputMat = mat3(0.59719, 0.35458, 0.04823, 0.07600, 0.90834, 0.01566, 0.02840, 0.13383, 0.83777);\n\n  // ODT_SAT => XYZ => D60_2_D65 => sRGB\n  const ACESOutputMat = mat3(1.60475, -0.53108, -0.07367, -0.10208, 1.10813, -0.00605, -0.00327, -0.07276, 1.07602);\n  color = color.mul(exposure).div(0.6);\n  color = ACESInputMat.mul(color);\n\n  // Apply RRT and ODT\n  color = RRTAndODTFit({\n    color\n  });\n  color = ACESOutputMat.mul(color);\n\n  // Clamp to [0, 1]\n  return color.clamp();\n});\nconst LINEAR_REC2020_TO_LINEAR_SRGB = mat3(vec3(1.6605, -0.1246, -0.0182), vec3(-0.5876, 1.1329, -0.1006), vec3(-0.0728, -0.0083, 1.1187));\nconst LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(vec3(0.6274, 0.0691, 0.0164), vec3(0.3293, 0.9195, 0.0880), vec3(0.0433, 0.0113, 0.8956));\nconst agxDefaultContrastApprox = tslFn(([x_immutable]) => {\n  const x = vec3(x_immutable).toVar();\n  const x2 = vec3(x.mul(x)).toVar();\n  const x4 = vec3(x2.mul(x2)).toVar();\n  return float(15.5).mul(x4.mul(x2)).sub(mul(40.14, x4.mul(x))).add(mul(31.96, x4).sub(mul(6.868, x2.mul(x))).add(mul(0.4298, x2).add(mul(0.1191, x).sub(0.00232))));\n});\nconst AGXToneMappingNode = tslFn(({\n  color,\n  exposure\n}) => {\n  const colortone = vec3(color).toVar();\n  const AgXInsetMatrix = mat3(vec3(0.856627153315983, 0.137318972929847, 0.11189821299995), vec3(0.0951212405381588, 0.761241990602591, 0.0767994186031903), vec3(0.0482516061458583, 0.101439036467562, 0.811302368396859));\n  const AgXOutsetMatrix = mat3(vec3(1.1271005818144368, -0.1413297634984383, -0.14132976349843826), vec3(-0.11060664309660323, 1.157823702216272, -0.11060664309660294), vec3(-0.016493938717834573, -0.016493938717834257, 1.2519364065950405));\n  const AgxMinEv = float(-12.47393);\n  const AgxMaxEv = float(4.026069);\n  colortone.mulAssign(exposure);\n  colortone.assign(LINEAR_SRGB_TO_LINEAR_REC2020.mul(colortone));\n  colortone.assign(AgXInsetMatrix.mul(colortone));\n  colortone.assign(max(colortone, 1e-10));\n  colortone.assign(log2(colortone));\n  colortone.assign(colortone.sub(AgxMinEv).div(AgxMaxEv.sub(AgxMinEv)));\n  colortone.assign(clamp(colortone, 0.0, 1.0));\n  colortone.assign(agxDefaultContrastApprox(colortone));\n  colortone.assign(AgXOutsetMatrix.mul(colortone));\n  colortone.assign(pow(max(vec3(0.0), colortone), vec3(2.2)));\n  colortone.assign(LINEAR_REC2020_TO_LINEAR_SRGB.mul(colortone));\n  colortone.assign(clamp(colortone, 0.0, 1.0));\n  return colortone;\n});\nconst toneMappingLib = {\n  [LinearToneMapping]: LinearToneMappingNode,\n  [ReinhardToneMapping]: ReinhardToneMappingNode,\n  [CineonToneMapping]: OptimizedCineonToneMappingNode,\n  [ACESFilmicToneMapping]: ACESFilmicToneMappingNode,\n  [AgXToneMapping]: AGXToneMappingNode\n};\nclass ToneMappingNode extends TempNode {\n  constructor(toneMapping = NoToneMapping, exposureNode = toneMappingExposure, colorNode = null) {\n    super('vec3');\n    this.toneMapping = toneMapping;\n    this.exposureNode = exposureNode;\n    this.colorNode = colorNode;\n  }\n  getCacheKey() {\n    let cacheKey = super.getCacheKey();\n    cacheKey = '{toneMapping:' + this.toneMapping + ',nodes:' + cacheKey + '}';\n    return cacheKey;\n  }\n  setup(builder) {\n    const colorNode = this.colorNode || builder.context.color;\n    const toneMapping = this.toneMapping;\n    if (toneMapping === NoToneMapping) return colorNode;\n    const toneMappingParams = {\n      exposure: this.exposureNode,\n      color: colorNode\n    };\n    const toneMappingNode = toneMappingLib[toneMapping];\n    let outputNode = null;\n    if (toneMappingNode) {\n      outputNode = toneMappingNode(toneMappingParams);\n    } else {\n      console.error('ToneMappingNode: Unsupported Tone Mapping configuration.', toneMapping);\n      outputNode = colorNode;\n    }\n    return outputNode;\n  }\n}\nexport default ToneMappingNode;\nexport const toneMapping = (mapping, exposure, color) => nodeObject(new ToneMappingNode(mapping, nodeObject(exposure), nodeObject(color)));\nexport const toneMappingExposure = rendererReference('toneMappingExposure', 'float');\naddNodeElement('toneMapping', (color, mapping, exposure) => toneMapping(mapping, exposure, color));\naddNodeClass('ToneMappingNode', ToneMappingNode);","map":{"version":3,"names":["TempNode","addNodeClass","addNodeElement","tslFn","nodeObject","float","mat3","vec3","rendererReference","clamp","log2","max","pow","mul","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","AgXToneMapping","LinearToneMappingNode","color","exposure","ReinhardToneMappingNode","div","add","OptimizedCineonToneMappingNode","sub","a","b","RRTAndODTFit","ACESFilmicToneMappingNode","ACESInputMat","ACESOutputMat","LINEAR_REC2020_TO_LINEAR_SRGB","LINEAR_SRGB_TO_LINEAR_REC2020","agxDefaultContrastApprox","x_immutable","x","toVar","x2","x4","AGXToneMappingNode","colortone","AgXInsetMatrix","AgXOutsetMatrix","AgxMinEv","AgxMaxEv","mulAssign","assign","toneMappingLib","ToneMappingNode","constructor","toneMapping","exposureNode","toneMappingExposure","colorNode","getCacheKey","cacheKey","setup","builder","context","toneMappingParams","toneMappingNode","outputNode","console","error","mapping"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/display/ToneMappingNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, tslFn, nodeObject, float, mat3, vec3 } from '../shadernode/ShaderNode.js';\nimport { rendererReference } from '../accessors/RendererReferenceNode.js';\nimport { clamp, log2, max, pow } from '../math/MathNode.js';\nimport { mul } from '../math/OperatorNode.js';\n\nimport { NoToneMapping, LinearToneMapping, ReinhardToneMapping, CineonToneMapping, ACESFilmicToneMapping, AgXToneMapping } from 'three';\n\n// exposure only\nconst LinearToneMappingNode = tslFn( ( { color, exposure } ) => {\n\n\treturn color.mul( exposure ).clamp();\n\n} );\n\n// source: https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf\nconst ReinhardToneMappingNode = tslFn( ( { color, exposure } ) => {\n\n\tcolor = color.mul( exposure );\n\n\treturn color.div( color.add( 1.0 ) ).clamp();\n\n} );\n\n// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/\nconst OptimizedCineonToneMappingNode = tslFn( ( { color, exposure } ) => {\n\n\t// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\tcolor = color.mul( exposure );\n\tcolor = color.sub( 0.004 ).max( 0.0 );\n\n\tconst a = color.mul( color.mul( 6.2 ).add( 0.5 ) );\n\tconst b = color.mul( color.mul( 6.2 ).add( 1.7 ) ).add( 0.06 );\n\n\treturn a.div( b ).pow( 2.2 );\n\n} );\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\nconst RRTAndODTFit = tslFn( ( { color } ) => {\n\n\tconst a = color.mul( color.add( 0.0245786 ) ).sub( 0.000090537 );\n\tconst b = color.mul( color.add( 0.4329510 ).mul( 0.983729 ) ).add( 0.238081 );\n\n\treturn a.div( b );\n\n} );\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\nconst ACESFilmicToneMappingNode = tslFn( ( { color, exposure } ) => {\n\n\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n\tconst ACESInputMat = mat3(\n\t\t0.59719, 0.35458, 0.04823,\n\t\t0.07600, 0.90834, 0.01566,\n\t\t0.02840, 0.13383, 0.83777\n\t);\n\n\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\n\tconst ACESOutputMat = mat3(\n\t\t1.60475, - 0.53108, - 0.07367,\n\t\t- 0.10208, 1.10813, - 0.00605,\n\t\t- 0.00327, - 0.07276, 1.07602\n\t);\n\n\tcolor = color.mul( exposure ).div( 0.6 );\n\n\tcolor = ACESInputMat.mul( color );\n\n\t// Apply RRT and ODT\n\tcolor = RRTAndODTFit( { color } );\n\n\tcolor = ACESOutputMat.mul( color );\n\n\t// Clamp to [0, 1]\n\treturn color.clamp();\n\n} );\n\n\n\nconst LINEAR_REC2020_TO_LINEAR_SRGB = mat3( vec3( 1.6605, - 0.1246, - 0.0182 ), vec3( - 0.5876, 1.1329, - 0.1006 ), vec3( - 0.0728, - 0.0083, 1.1187 ) );\nconst LINEAR_SRGB_TO_LINEAR_REC2020 = mat3( vec3( 0.6274, 0.0691, 0.0164 ), vec3( 0.3293, 0.9195, 0.0880 ), vec3( 0.0433, 0.0113, 0.8956 ) );\n\nconst agxDefaultContrastApprox = tslFn( ( [ x_immutable ] ) => {\n\n\tconst x = vec3( x_immutable ).toVar();\n\tconst x2 = vec3( x.mul( x ) ).toVar();\n\tconst x4 = vec3( x2.mul( x2 ) ).toVar();\n\n\treturn float( 15.5 ).mul( x4.mul( x2 ) ).sub( mul( 40.14, x4.mul( x ) ) ).add( mul( 31.96, x4 ).sub( mul( 6.868, x2.mul( x ) ) ).add( mul( 0.4298, x2 ).add( mul( 0.1191, x ).sub( 0.00232 ) ) ) );\n\n} );\n\nconst AGXToneMappingNode = tslFn( ( { color, exposure } ) => {\n\n\tconst colortone = vec3( color ).toVar();\n\tconst AgXInsetMatrix = mat3( vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ), vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ), vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 ) );\n\tconst AgXOutsetMatrix = mat3( vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ), vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ), vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 ) );\n\tconst AgxMinEv = float( - 12.47393 );\n\tconst AgxMaxEv = float( 4.026069 );\n\tcolortone.mulAssign( exposure );\n\tcolortone.assign( LINEAR_SRGB_TO_LINEAR_REC2020.mul( colortone ) );\n\tcolortone.assign( AgXInsetMatrix.mul( colortone ) );\n\tcolortone.assign( max( colortone, 1e-10 ) );\n\tcolortone.assign( log2( colortone ) );\n\tcolortone.assign( colortone.sub( AgxMinEv ).div( AgxMaxEv.sub( AgxMinEv ) ) );\n\tcolortone.assign( clamp( colortone, 0.0, 1.0 ) );\n\tcolortone.assign( agxDefaultContrastApprox( colortone ) );\n\tcolortone.assign( AgXOutsetMatrix.mul( colortone ) );\n\tcolortone.assign( pow( max( vec3( 0.0 ), colortone ), vec3( 2.2 ) ) );\n\tcolortone.assign( LINEAR_REC2020_TO_LINEAR_SRGB.mul( colortone ) );\n\tcolortone.assign( clamp( colortone, 0.0, 1.0 ) );\n\n\treturn colortone;\n\n} );\n\n\nconst toneMappingLib = {\n\t[ LinearToneMapping ]: LinearToneMappingNode,\n\t[ ReinhardToneMapping ]: ReinhardToneMappingNode,\n\t[ CineonToneMapping ]: OptimizedCineonToneMappingNode,\n\t[ ACESFilmicToneMapping ]: ACESFilmicToneMappingNode,\n\t[ AgXToneMapping ]: AGXToneMappingNode\n};\n\nclass ToneMappingNode extends TempNode {\n\n\tconstructor( toneMapping = NoToneMapping, exposureNode = toneMappingExposure, colorNode = null ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.toneMapping = toneMapping;\n\n\t\tthis.exposureNode = exposureNode;\n\t\tthis.colorNode = colorNode;\n\n\t}\n\n\tgetCacheKey() {\n\n\t\tlet cacheKey = super.getCacheKey();\n\t\tcacheKey = '{toneMapping:' + this.toneMapping + ',nodes:' + cacheKey + '}';\n\n\t\treturn cacheKey;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst colorNode = this.colorNode || builder.context.color;\n\t\tconst toneMapping = this.toneMapping;\n\n\t\tif ( toneMapping === NoToneMapping ) return colorNode;\n\n\t\tconst toneMappingParams = { exposure: this.exposureNode, color: colorNode };\n\t\tconst toneMappingNode = toneMappingLib[ toneMapping ];\n\n\t\tlet outputNode = null;\n\n\t\tif ( toneMappingNode ) {\n\n\t\t\toutputNode = toneMappingNode( toneMappingParams );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'ToneMappingNode: Unsupported Tone Mapping configuration.', toneMapping );\n\n\t\t\toutputNode = colorNode;\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\nexport default ToneMappingNode;\n\nexport const toneMapping = ( mapping, exposure, color ) => nodeObject( new ToneMappingNode( mapping, nodeObject( exposure ), nodeObject( color ) ) );\nexport const toneMappingExposure = rendererReference( 'toneMappingExposure', 'float' );\n\naddNodeElement( 'toneMapping', ( color, mapping, exposure ) => toneMapping( mapping, exposure, color ) );\n\naddNodeClass( 'ToneMappingNode', ToneMappingNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}