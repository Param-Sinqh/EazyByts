{"ast":null,"code":"import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { materialReference } from '../accessors/MaterialReferenceNode.js';\nimport { diffuseColor } from '../core/PropertyNode.js';\nimport { vec3 } from '../shadernode/ShaderNode.js';\nimport { MeshMatcapMaterial } from 'three';\nimport { mix } from '../math/MathNode.js';\nimport { matcapUV } from '../utils/MatcapUVNode.js';\nconst defaultValues = new MeshMatcapMaterial();\nclass MeshMatcapNodeMaterial extends NodeMaterial {\n  constructor(parameters) {\n    super();\n    this.isMeshMatcapNodeMaterial = true;\n    this.lights = false;\n    this.setDefaultValues(defaultValues);\n    this.setValues(parameters);\n  }\n  setupVariants(builder) {\n    const uv = matcapUV;\n    let matcapColor;\n    if (builder.material.matcap) {\n      matcapColor = materialReference('matcap', 'texture').context({\n        getUV: () => uv\n      });\n    } else {\n      matcapColor = vec3(mix(0.2, 0.8, uv.y)); // default if matcap is missing\n    }\n\n    diffuseColor.rgb.mulAssign(matcapColor.rgb);\n  }\n}\nexport default MeshMatcapNodeMaterial;\naddNodeMaterial('MeshMatcapNodeMaterial', MeshMatcapNodeMaterial);","map":{"version":3,"names":["NodeMaterial","addNodeMaterial","materialReference","diffuseColor","vec3","MeshMatcapMaterial","mix","matcapUV","defaultValues","MeshMatcapNodeMaterial","constructor","parameters","isMeshMatcapNodeMaterial","lights","setDefaultValues","setValues","setupVariants","builder","uv","matcapColor","material","matcap","context","getUV","y","rgb","mulAssign"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/materials/MeshMatcapNodeMaterial.js"],"sourcesContent":["import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { materialReference } from '../accessors/MaterialReferenceNode.js';\nimport { diffuseColor } from '../core/PropertyNode.js';\nimport { vec3 } from '../shadernode/ShaderNode.js';\nimport { MeshMatcapMaterial } from 'three';\nimport { mix } from '../math/MathNode.js';\nimport { matcapUV } from '../utils/MatcapUVNode.js';\n\nconst defaultValues = new MeshMatcapMaterial();\n\nclass MeshMatcapNodeMaterial extends NodeMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshMatcapNodeMaterial = true;\n\n\t\tthis.lights = false;\n\n\t\tthis.setDefaultValues( defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupVariants( builder ) {\n\n\t\tconst uv = matcapUV;\n\n\t\tlet matcapColor;\n\n\t\tif ( builder.material.matcap ) {\n\n\t\t\tmatcapColor = materialReference( 'matcap', 'texture' ).context( { getUV: () => uv } );\n\n\t\t} else {\n\n\t\t\tmatcapColor = vec3( mix( 0.2, 0.8, uv.y ) ); // default if matcap is missing\n\n\t\t}\n\n\t\tdiffuseColor.rgb.mulAssign( matcapColor.rgb );\n\n\t}\n\n}\n\n\nexport default MeshMatcapNodeMaterial;\n\naddNodeMaterial( 'MeshMatcapNodeMaterial', MeshMatcapNodeMaterial );\n"],"mappings":"AAAA,OAAOA,YAAY,IAAIC,eAAe,QAAQ,mBAAmB;AACjE,SAASC,iBAAiB,QAAQ,uCAAuC;AACzE,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,IAAI,QAAQ,6BAA6B;AAClD,SAASC,kBAAkB,QAAQ,OAAO;AAC1C,SAASC,GAAG,QAAQ,qBAAqB;AACzC,SAASC,QAAQ,QAAQ,0BAA0B;AAEnD,MAAMC,aAAa,GAAG,IAAIH,kBAAkB,CAAC,CAAC;AAE9C,MAAMI,sBAAsB,SAAST,YAAY,CAAC;EAEjDU,WAAWA,CAAEC,UAAU,EAAG;IAEzB,KAAK,CAAC,CAAC;IAEP,IAAI,CAACC,wBAAwB,GAAG,IAAI;IAEpC,IAAI,CAACC,MAAM,GAAG,KAAK;IAEnB,IAAI,CAACC,gBAAgB,CAAEN,aAAc,CAAC;IAEtC,IAAI,CAACO,SAAS,CAAEJ,UAAW,CAAC;EAE7B;EAEAK,aAAaA,CAAEC,OAAO,EAAG;IAExB,MAAMC,EAAE,GAAGX,QAAQ;IAEnB,IAAIY,WAAW;IAEf,IAAKF,OAAO,CAACG,QAAQ,CAACC,MAAM,EAAG;MAE9BF,WAAW,GAAGjB,iBAAiB,CAAE,QAAQ,EAAE,SAAU,CAAC,CAACoB,OAAO,CAAE;QAAEC,KAAK,EAAEA,CAAA,KAAML;MAAG,CAAE,CAAC;IAEtF,CAAC,MAAM;MAENC,WAAW,GAAGf,IAAI,CAAEE,GAAG,CAAE,GAAG,EAAE,GAAG,EAAEY,EAAE,CAACM,CAAE,CAAE,CAAC,CAAC,CAAC;IAE9C;;IAEArB,YAAY,CAACsB,GAAG,CAACC,SAAS,CAAEP,WAAW,CAACM,GAAI,CAAC;EAE9C;AAED;AAGA,eAAehB,sBAAsB;AAErCR,eAAe,CAAE,wBAAwB,EAAEQ,sBAAuB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}