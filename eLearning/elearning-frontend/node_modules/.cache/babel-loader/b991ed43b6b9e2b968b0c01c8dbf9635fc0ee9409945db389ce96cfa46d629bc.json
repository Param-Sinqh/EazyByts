{"ast":null,"code":"import { bitangentView } from './BitangentNode.js';\nimport { normalView, transformedNormalView } from './NormalNode.js';\nimport { tangentView } from './TangentNode.js';\nimport { mat3 } from '../shadernode/ShaderNode.js';\nimport { mix } from '../math/MathNode.js';\nimport { anisotropy, anisotropyB, roughness } from '../core/PropertyNode.js';\nimport { positionViewDirection } from './PositionNode.js';\nexport const TBNViewMatrix = mat3(tangentView, bitangentView, normalView);\nexport const parallaxDirection = positionViewDirection.mul(TBNViewMatrix) /*.normalize()*/;\nexport const parallaxUV = (uv, scale) => uv.sub(parallaxDirection.mul(scale));\nexport const transformedBentNormalView = (() => {\n  // https://google.github.io/filament/Filament.md.html#lighting/imagebasedlights/anisotropy\n\n  let bentNormal = anisotropyB.cross(positionViewDirection);\n  bentNormal = bentNormal.cross(anisotropyB).normalize();\n  bentNormal = mix(bentNormal, transformedNormalView, anisotropy.mul(roughness.oneMinus()).oneMinus().pow2().pow2()).normalize();\n  return bentNormal;\n})();","map":{"version":3,"names":["bitangentView","normalView","transformedNormalView","tangentView","mat3","mix","anisotropy","anisotropyB","roughness","positionViewDirection","TBNViewMatrix","parallaxDirection","mul","parallaxUV","uv","scale","sub","transformedBentNormalView","bentNormal","cross","normalize","oneMinus","pow2"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/accessors/AccessorsUtils.js"],"sourcesContent":["import { bitangentView } from './BitangentNode.js';\nimport { normalView, transformedNormalView } from './NormalNode.js';\nimport { tangentView } from './TangentNode.js';\nimport { mat3 } from '../shadernode/ShaderNode.js';\nimport { mix } from '../math/MathNode.js';\nimport { anisotropy, anisotropyB, roughness } from '../core/PropertyNode.js';\nimport { positionViewDirection } from './PositionNode.js';\n\nexport const TBNViewMatrix = mat3( tangentView, bitangentView, normalView );\n\nexport const parallaxDirection = positionViewDirection.mul( TBNViewMatrix )/*.normalize()*/;\nexport const parallaxUV = ( uv, scale ) => uv.sub( parallaxDirection.mul( scale ) );\n\nexport const transformedBentNormalView = ( () => {\n\n\t// https://google.github.io/filament/Filament.md.html#lighting/imagebasedlights/anisotropy\n\n\tlet bentNormal = anisotropyB.cross( positionViewDirection );\n\tbentNormal = bentNormal.cross( anisotropyB ).normalize();\n\tbentNormal = mix( bentNormal, transformedNormalView, anisotropy.mul( roughness.oneMinus() ).oneMinus().pow2().pow2() ).normalize();\n\n\treturn bentNormal;\n\n\n} )();\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,oBAAoB;AAClD,SAASC,UAAU,EAAEC,qBAAqB,QAAQ,iBAAiB;AACnE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,IAAI,QAAQ,6BAA6B;AAClD,SAASC,GAAG,QAAQ,qBAAqB;AACzC,SAASC,UAAU,EAAEC,WAAW,EAAEC,SAAS,QAAQ,yBAAyB;AAC5E,SAASC,qBAAqB,QAAQ,mBAAmB;AAEzD,OAAO,MAAMC,aAAa,GAAGN,IAAI,CAAED,WAAW,EAAEH,aAAa,EAAEC,UAAW,CAAC;AAE3E,OAAO,MAAMU,iBAAiB,GAAGF,qBAAqB,CAACG,GAAG,CAAEF,aAAc,CAAC;AAC3E,OAAO,MAAMG,UAAU,GAAGA,CAAEC,EAAE,EAAEC,KAAK,KAAMD,EAAE,CAACE,GAAG,CAAEL,iBAAiB,CAACC,GAAG,CAAEG,KAAM,CAAE,CAAC;AAEnF,OAAO,MAAME,yBAAyB,GAAG,CAAE,MAAM;EAEhD;;EAEA,IAAIC,UAAU,GAAGX,WAAW,CAACY,KAAK,CAAEV,qBAAsB,CAAC;EAC3DS,UAAU,GAAGA,UAAU,CAACC,KAAK,CAAEZ,WAAY,CAAC,CAACa,SAAS,CAAC,CAAC;EACxDF,UAAU,GAAGb,GAAG,CAAEa,UAAU,EAAEhB,qBAAqB,EAAEI,UAAU,CAACM,GAAG,CAAEJ,SAAS,CAACa,QAAQ,CAAC,CAAE,CAAC,CAACA,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACA,IAAI,CAAC,CAAE,CAAC,CAACF,SAAS,CAAC,CAAC;EAElI,OAAOF,UAAU;AAGlB,CAAC,EAAG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}