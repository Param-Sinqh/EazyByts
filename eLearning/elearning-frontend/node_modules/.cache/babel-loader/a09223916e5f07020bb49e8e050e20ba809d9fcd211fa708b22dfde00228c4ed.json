{"ast":null,"code":"import BRDF_Lambert from './BSDF/BRDF_Lambert.js';\nimport BRDF_GGX from './BSDF/BRDF_GGX.js';\nimport DFGApprox from './BSDF/DFGApprox.js';\nimport EnvironmentBRDF from './BSDF/EnvironmentBRDF.js';\nimport F_Schlick from './BSDF/F_Schlick.js';\nimport Schlick_to_F0 from './BSDF/Schlick_to_F0.js';\nimport BRDF_Sheen from './BSDF/BRDF_Sheen.js';\nimport LightingModel from '../core/LightingModel.js';\nimport { diffuseColor, specularColor, specularF90, roughness, clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness, ior, thickness, transmission, attenuationDistance, attenuationColor, dispersion } from '../core/PropertyNode.js';\nimport { transformedNormalView, transformedClearcoatNormalView, transformedNormalWorld } from '../accessors/NormalNode.js';\nimport { positionViewDirection, positionWorld } from '../accessors/PositionNode.js';\nimport { tslFn, float, vec2, vec3, vec4, mat3, If } from '../shadernode/ShaderNode.js';\nimport { cond } from '../math/CondNode.js';\nimport { mix, normalize, refract, length, clamp, log2, log, exp, smoothstep } from '../math/MathNode.js';\nimport { div } from '../math/OperatorNode.js';\nimport { cameraPosition, cameraProjectionMatrix, cameraViewMatrix } from '../accessors/CameraNode.js';\nimport { modelWorldMatrix } from '../accessors/ModelNode.js';\nimport { viewportResolution } from '../display/ViewportNode.js';\nimport { viewportMipTexture } from '../display/ViewportTextureNode.js';\nimport { loop } from '../utils/LoopNode.js';\n\n//\n// Transmission\n//\n\nconst getVolumeTransmissionRay = tslFn(([n, v, thickness, ior, modelMatrix]) => {\n  // Direction of refracted light.\n  const refractionVector = vec3(refract(v.negate(), normalize(n), div(1.0, ior)));\n\n  // Compute rotation-independant scaling of the model matrix.\n  const modelScale = vec3(length(modelMatrix[0].xyz), length(modelMatrix[1].xyz), length(modelMatrix[2].xyz));\n\n  // The thickness is specified in local space.\n  return normalize(refractionVector).mul(thickness.mul(modelScale));\n}).setLayout({\n  name: 'getVolumeTransmissionRay',\n  type: 'vec3',\n  inputs: [{\n    name: 'n',\n    type: 'vec3'\n  }, {\n    name: 'v',\n    type: 'vec3'\n  }, {\n    name: 'thickness',\n    type: 'float'\n  }, {\n    name: 'ior',\n    type: 'float'\n  }, {\n    name: 'modelMatrix',\n    type: 'mat4'\n  }]\n});\nconst applyIorToRoughness = tslFn(([roughness, ior]) => {\n  // Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\n  // an IOR of 1.5 results in the default amount of microfacet refraction.\n  return roughness.mul(clamp(ior.mul(2.0).sub(2.0), 0.0, 1.0));\n}).setLayout({\n  name: 'applyIorToRoughness',\n  type: 'float',\n  inputs: [{\n    name: 'roughness',\n    type: 'float'\n  }, {\n    name: 'ior',\n    type: 'float'\n  }]\n});\nconst singleViewportMipTexture = viewportMipTexture();\nconst getTransmissionSample = tslFn(([fragCoord, roughness, ior]) => {\n  const transmissionSample = singleViewportMipTexture.uv(fragCoord);\n  //const transmissionSample = viewportMipTexture( fragCoord );\n\n  const lod = log2(float(viewportResolution.x)).mul(applyIorToRoughness(roughness, ior));\n  return transmissionSample.bicubic(lod);\n});\nconst volumeAttenuation = tslFn(([transmissionDistance, attenuationColor, attenuationDistance]) => {\n  If(attenuationDistance.notEqual(0), () => {\n    // Compute light attenuation using Beer's law.\n    const attenuationCoefficient = log(attenuationColor).negate().div(attenuationDistance);\n    const transmittance = exp(attenuationCoefficient.negate().mul(transmissionDistance));\n    return transmittance;\n  });\n\n  // Attenuation distance is +âˆž, i.e. the transmitted color is not attenuated at all.\n  return vec3(1.0);\n}).setLayout({\n  name: 'volumeAttenuation',\n  type: 'vec3',\n  inputs: [{\n    name: 'transmissionDistance',\n    type: 'float'\n  }, {\n    name: 'attenuationColor',\n    type: 'vec3'\n  }, {\n    name: 'attenuationDistance',\n    type: 'float'\n  }]\n});\nconst getIBLVolumeRefraction = tslFn(([n, v, roughness, diffuseColor, specularColor, specularF90, position, modelMatrix, viewMatrix, projMatrix, ior, thickness, attenuationColor, attenuationDistance, dispersion]) => {\n  let transmittedLight, transmittance;\n  if (dispersion) {\n    transmittedLight = vec4().toVar();\n    transmittance = vec3().toVar();\n    const halfSpread = ior.sub(1.0).mul(dispersion.mul(0.025));\n    const iors = vec3(ior.sub(halfSpread), ior, ior.add(halfSpread));\n    loop({\n      start: 0,\n      end: 3\n    }, ({\n      i\n    }) => {\n      const ior = iors.element(i);\n      const transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\n      const refractedRayExit = position.add(transmissionRay);\n\n      // Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n      const ndcPos = projMatrix.mul(viewMatrix.mul(vec4(refractedRayExit, 1.0)));\n      const refractionCoords = vec2(ndcPos.xy.div(ndcPos.w)).toVar();\n      refractionCoords.addAssign(1.0);\n      refractionCoords.divAssign(2.0);\n      refractionCoords.assign(vec2(refractionCoords.x, refractionCoords.y.oneMinus())); // webgpu\n\n      // Sample framebuffer to get pixel the refracted ray hits.\n      const transmissionSample = getTransmissionSample(refractionCoords, roughness, ior);\n      transmittedLight.element(i).assign(transmissionSample.element(i));\n      transmittedLight.a.addAssign(transmissionSample.a);\n      transmittance.element(i).assign(diffuseColor.element(i).mul(volumeAttenuation(length(transmissionRay), attenuationColor, attenuationDistance).element(i)));\n    });\n    transmittedLight.a.divAssign(3.0);\n  } else {\n    const transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\n    const refractedRayExit = position.add(transmissionRay);\n\n    // Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n    const ndcPos = projMatrix.mul(viewMatrix.mul(vec4(refractedRayExit, 1.0)));\n    const refractionCoords = vec2(ndcPos.xy.div(ndcPos.w)).toVar();\n    refractionCoords.addAssign(1.0);\n    refractionCoords.divAssign(2.0);\n    refractionCoords.assign(vec2(refractionCoords.x, refractionCoords.y.oneMinus())); // webgpu\n\n    // Sample framebuffer to get pixel the refracted ray hits.\n    transmittedLight = getTransmissionSample(refractionCoords, roughness, ior);\n    transmittance = diffuseColor.mul(volumeAttenuation(length(transmissionRay), attenuationColor, attenuationDistance));\n  }\n  const attenuatedColor = transmittance.rgb.mul(transmittedLight.rgb);\n  const dotNV = n.dot(v).clamp();\n\n  // Get the specular component.\n  const F = vec3(EnvironmentBRDF({\n    // n, v, specularColor, specularF90, roughness\n    dotNV,\n    specularColor,\n    specularF90,\n    roughness\n  }));\n\n  // As less light is transmitted, the opacity should be increased. This simple approximation does a decent job\n  // of modulating a CSS background, and has no effect when the buffer is opaque, due to a solid object or clear color.\n  const transmittanceFactor = transmittance.r.add(transmittance.g, transmittance.b).div(3.0);\n  return vec4(F.oneMinus().mul(attenuatedColor), transmittedLight.a.oneMinus().mul(transmittanceFactor).oneMinus());\n});\n\n//\n// Iridescence\n//\n\n// XYZ to linear-sRGB color space\nconst XYZ_TO_REC709 = mat3(3.2404542, -0.9692660, 0.0556434, -1.5371385, 1.8760108, -0.2040259, -0.4985314, 0.0415560, 1.0572252);\n\n// Assume air interface for top\n// Note: We don't handle the case fresnel0 == 1\nconst Fresnel0ToIor = fresnel0 => {\n  const sqrtF0 = fresnel0.sqrt();\n  return vec3(1.0).add(sqrtF0).div(vec3(1.0).sub(sqrtF0));\n};\n\n// ior is a value between 1.0 and 3.0. 1.0 is air interface\nconst IorToFresnel0 = (transmittedIor, incidentIor) => {\n  return transmittedIor.sub(incidentIor).div(transmittedIor.add(incidentIor)).pow2();\n};\n\n// Fresnel equations for dielectric/dielectric interfaces.\n// Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\n// Evaluation XYZ sensitivity curves in Fourier space\nconst evalSensitivity = (OPD, shift) => {\n  const phase = OPD.mul(2.0 * Math.PI * 1.0e-9);\n  const val = vec3(5.4856e-13, 4.4201e-13, 5.2481e-13);\n  const pos = vec3(1.6810e+06, 1.7953e+06, 2.2084e+06);\n  const VAR = vec3(4.3278e+09, 9.3046e+09, 6.6121e+09);\n  const x = float(9.7470e-14 * Math.sqrt(2.0 * Math.PI * 4.5282e+09)).mul(phase.mul(2.2399e+06).add(shift.x).cos()).mul(phase.pow2().mul(-4.5282e+09).exp());\n  let xyz = val.mul(VAR.mul(2.0 * Math.PI).sqrt()).mul(pos.mul(phase).add(shift).cos()).mul(phase.pow2().negate().mul(VAR).exp());\n  xyz = vec3(xyz.x.add(x), xyz.y, xyz.z).div(1.0685e-7);\n  const rgb = XYZ_TO_REC709.mul(xyz);\n  return rgb;\n};\nconst evalIridescence = tslFn(({\n  outsideIOR,\n  eta2,\n  cosTheta1,\n  thinFilmThickness,\n  baseF0\n}) => {\n  // Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0\n  const iridescenceIOR = mix(outsideIOR, eta2, smoothstep(0.0, 0.03, thinFilmThickness));\n  // Evaluate the cosTheta on the base layer (Snell law)\n  const sinTheta2Sq = outsideIOR.div(iridescenceIOR).pow2().mul(float(1).sub(cosTheta1.pow2()));\n\n  // Handle TIR:\n  const cosTheta2Sq = float(1).sub(sinTheta2Sq);\n  /*if ( cosTheta2Sq < 0.0 ) {\n  \t\t\treturn vec3( 1.0 );\n  \t}*/\n\n  const cosTheta2 = cosTheta2Sq.sqrt();\n\n  // First interface\n  const R0 = IorToFresnel0(iridescenceIOR, outsideIOR);\n  const R12 = F_Schlick({\n    f0: R0,\n    f90: 1.0,\n    dotVH: cosTheta1\n  });\n  //const R21 = R12;\n  const T121 = R12.oneMinus();\n  const phi12 = iridescenceIOR.lessThan(outsideIOR).cond(Math.PI, 0.0);\n  const phi21 = float(Math.PI).sub(phi12);\n\n  // Second interface\n  const baseIOR = Fresnel0ToIor(baseF0.clamp(0.0, 0.9999)); // guard against 1.0\n  const R1 = IorToFresnel0(baseIOR, iridescenceIOR.toVec3());\n  const R23 = F_Schlick({\n    f0: R1,\n    f90: 1.0,\n    dotVH: cosTheta2\n  });\n  const phi23 = vec3(baseIOR.x.lessThan(iridescenceIOR).cond(Math.PI, 0.0), baseIOR.y.lessThan(iridescenceIOR).cond(Math.PI, 0.0), baseIOR.z.lessThan(iridescenceIOR).cond(Math.PI, 0.0));\n\n  // Phase shift\n  const OPD = iridescenceIOR.mul(thinFilmThickness, cosTheta2, 2.0);\n  const phi = vec3(phi21).add(phi23);\n\n  // Compound terms\n  const R123 = R12.mul(R23).clamp(1e-5, 0.9999);\n  const r123 = R123.sqrt();\n  const Rs = T121.pow2().mul(R23).div(vec3(1.0).sub(R123));\n\n  // Reflectance term for m = 0 (DC term amplitude)\n  const C0 = R12.add(Rs);\n  let I = C0;\n\n  // Reflectance term for m > 0 (pairs of diracs)\n  let Cm = Rs.sub(T121);\n  for (let m = 1; m <= 2; ++m) {\n    Cm = Cm.mul(r123);\n    const Sm = evalSensitivity(float(m).mul(OPD), float(m).mul(phi)).mul(2.0);\n    I = I.add(Cm.mul(Sm));\n  }\n\n  // Since out of gamut colors might be produced, negative color values are clamped to 0.\n  return I.max(vec3(0.0));\n}).setLayout({\n  name: 'evalIridescence',\n  type: 'vec3',\n  inputs: [{\n    name: 'outsideIOR',\n    type: 'float'\n  }, {\n    name: 'eta2',\n    type: 'float'\n  }, {\n    name: 'cosTheta1',\n    type: 'float'\n  }, {\n    name: 'thinFilmThickness',\n    type: 'float'\n  }, {\n    name: 'baseF0',\n    type: 'vec3'\n  }]\n});\n\n//\n//\tSheen\n//\n\n// This is a curve-fit approxmation to the \"Charlie sheen\" BRDF integrated over the hemisphere from\n// Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\". The analysis can be found\n// in the Sheen section of https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing\nconst IBLSheenBRDF = tslFn(({\n  normal,\n  viewDir,\n  roughness\n}) => {\n  const dotNV = normal.dot(viewDir).saturate();\n  const r2 = roughness.pow2();\n  const a = cond(roughness.lessThan(0.25), float(-339.2).mul(r2).add(float(161.4).mul(roughness)).sub(25.9), float(-8.48).mul(r2).add(float(14.3).mul(roughness)).sub(9.95));\n  const b = cond(roughness.lessThan(0.25), float(44.0).mul(r2).sub(float(23.7).mul(roughness)).add(3.26), float(1.97).mul(r2).sub(float(3.27).mul(roughness)).add(0.72));\n  const DG = cond(roughness.lessThan(0.25), 0.0, float(0.1).mul(roughness).sub(0.025)).add(a.mul(dotNV).add(b).exp());\n  return DG.mul(1.0 / Math.PI).saturate();\n});\nconst clearcoatF0 = vec3(0.04);\nconst clearcoatF90 = float(1);\n\n//\n\nclass PhysicalLightingModel extends LightingModel {\n  constructor(clearcoat = false, sheen = false, iridescence = false, anisotropy = false, transmission = false, dispersion = false) {\n    super();\n    this.clearcoat = clearcoat;\n    this.sheen = sheen;\n    this.iridescence = iridescence;\n    this.anisotropy = anisotropy;\n    this.transmission = transmission;\n    this.dispersion = dispersion;\n    this.clearcoatRadiance = null;\n    this.clearcoatSpecularDirect = null;\n    this.clearcoatSpecularIndirect = null;\n    this.sheenSpecularDirect = null;\n    this.sheenSpecularIndirect = null;\n    this.iridescenceFresnel = null;\n    this.iridescenceF0 = null;\n  }\n  start(context) {\n    if (this.clearcoat === true) {\n      this.clearcoatRadiance = vec3().temp('clearcoatRadiance');\n      this.clearcoatSpecularDirect = vec3().temp('clearcoatSpecularDirect');\n      this.clearcoatSpecularIndirect = vec3().temp('clearcoatSpecularIndirect');\n    }\n    if (this.sheen === true) {\n      this.sheenSpecularDirect = vec3().temp('sheenSpecularDirect');\n      this.sheenSpecularIndirect = vec3().temp('sheenSpecularIndirect');\n    }\n    if (this.iridescence === true) {\n      const dotNVi = transformedNormalView.dot(positionViewDirection).clamp();\n      this.iridescenceFresnel = evalIridescence({\n        outsideIOR: float(1.0),\n        eta2: iridescenceIOR,\n        cosTheta1: dotNVi,\n        thinFilmThickness: iridescenceThickness,\n        baseF0: specularColor\n      });\n      this.iridescenceF0 = Schlick_to_F0({\n        f: this.iridescenceFresnel,\n        f90: 1.0,\n        dotVH: dotNVi\n      });\n    }\n    if (this.transmission === true) {\n      const position = positionWorld;\n      const v = cameraPosition.sub(positionWorld).normalize(); // TODO: Create Node for this, same issue in MaterialX\n      const n = transformedNormalWorld;\n      context.backdrop = getIBLVolumeRefraction(n, v, roughness, diffuseColor, specularColor, specularF90,\n      // specularF90\n      position,\n      // positionWorld\n      modelWorldMatrix,\n      // modelMatrix\n      cameraViewMatrix,\n      // viewMatrix\n      cameraProjectionMatrix,\n      // projMatrix\n      ior, thickness, attenuationColor, attenuationDistance, this.dispersion ? dispersion : null);\n      context.backdropAlpha = transmission;\n      diffuseColor.a.mulAssign(mix(1, context.backdrop.a, transmission));\n    }\n  }\n\n  // Fdez-AgÃ¼era's \"Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting\"\n  // Approximates multiscattering in order to preserve energy.\n  // http://www.jcgt.org/published/0008/01/03/\n\n  computeMultiscattering(singleScatter, multiScatter, specularF90) {\n    const dotNV = transformedNormalView.dot(positionViewDirection).clamp(); // @ TODO: Move to core dotNV\n\n    const fab = DFGApprox({\n      roughness,\n      dotNV\n    });\n    const Fr = this.iridescenceF0 ? iridescence.mix(specularColor, this.iridescenceF0) : specularColor;\n    const FssEss = Fr.mul(fab.x).add(specularF90.mul(fab.y));\n    const Ess = fab.x.add(fab.y);\n    const Ems = Ess.oneMinus();\n    const Favg = specularColor.add(specularColor.oneMinus().mul(0.047619)); // 1/21\n    const Fms = FssEss.mul(Favg).div(Ems.mul(Favg).oneMinus());\n    singleScatter.addAssign(FssEss);\n    multiScatter.addAssign(Fms.mul(Ems));\n  }\n  direct({\n    lightDirection,\n    lightColor,\n    reflectedLight\n  }) {\n    const dotNL = transformedNormalView.dot(lightDirection).clamp();\n    const irradiance = dotNL.mul(lightColor);\n    if (this.sheen === true) {\n      this.sheenSpecularDirect.addAssign(irradiance.mul(BRDF_Sheen({\n        lightDirection\n      })));\n    }\n    if (this.clearcoat === true) {\n      const dotNLcc = transformedClearcoatNormalView.dot(lightDirection).clamp();\n      const ccIrradiance = dotNLcc.mul(lightColor);\n      this.clearcoatSpecularDirect.addAssign(ccIrradiance.mul(BRDF_GGX({\n        lightDirection,\n        f0: clearcoatF0,\n        f90: clearcoatF90,\n        roughness: clearcoatRoughness,\n        normalView: transformedClearcoatNormalView\n      })));\n    }\n    reflectedLight.directDiffuse.addAssign(irradiance.mul(BRDF_Lambert({\n      diffuseColor: diffuseColor.rgb\n    })));\n    reflectedLight.directSpecular.addAssign(irradiance.mul(BRDF_GGX({\n      lightDirection,\n      f0: specularColor,\n      f90: 1,\n      roughness,\n      iridescence: this.iridescence,\n      f: this.iridescenceFresnel,\n      USE_IRIDESCENCE: this.iridescence,\n      USE_ANISOTROPY: this.anisotropy\n    })));\n  }\n  indirectDiffuse({\n    irradiance,\n    reflectedLight\n  }) {\n    reflectedLight.indirectDiffuse.addAssign(irradiance.mul(BRDF_Lambert({\n      diffuseColor\n    })));\n  }\n  indirectSpecular({\n    radiance,\n    iblIrradiance,\n    reflectedLight\n  }) {\n    if (this.sheen === true) {\n      this.sheenSpecularIndirect.addAssign(iblIrradiance.mul(sheen, IBLSheenBRDF({\n        normal: transformedNormalView,\n        viewDir: positionViewDirection,\n        roughness: sheenRoughness\n      })));\n    }\n    if (this.clearcoat === true) {\n      const dotNVcc = transformedClearcoatNormalView.dot(positionViewDirection).clamp();\n      const clearcoatEnv = EnvironmentBRDF({\n        dotNV: dotNVcc,\n        specularColor: clearcoatF0,\n        specularF90: clearcoatF90,\n        roughness: clearcoatRoughness\n      });\n      this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(clearcoatEnv));\n    }\n\n    // Both indirect specular and indirect diffuse light accumulate here\n\n    const singleScattering = vec3().temp('singleScattering');\n    const multiScattering = vec3().temp('multiScattering');\n    const cosineWeightedIrradiance = iblIrradiance.mul(1 / Math.PI);\n    this.computeMultiscattering(singleScattering, multiScattering, specularF90);\n    const totalScattering = singleScattering.add(multiScattering);\n    const diffuse = diffuseColor.mul(totalScattering.r.max(totalScattering.g).max(totalScattering.b).oneMinus());\n    reflectedLight.indirectSpecular.addAssign(radiance.mul(singleScattering));\n    reflectedLight.indirectSpecular.addAssign(multiScattering.mul(cosineWeightedIrradiance));\n    reflectedLight.indirectDiffuse.addAssign(diffuse.mul(cosineWeightedIrradiance));\n  }\n  ambientOcclusion({\n    ambientOcclusion,\n    reflectedLight\n  }) {\n    const dotNV = transformedNormalView.dot(positionViewDirection).clamp(); // @ TODO: Move to core dotNV\n\n    const aoNV = dotNV.add(ambientOcclusion);\n    const aoExp = roughness.mul(-16.0).oneMinus().negate().exp2();\n    const aoNode = ambientOcclusion.sub(aoNV.pow(aoExp).oneMinus()).clamp();\n    if (this.clearcoat === true) {\n      this.clearcoatSpecularIndirect.mulAssign(ambientOcclusion);\n    }\n    if (this.sheen === true) {\n      this.sheenSpecularIndirect.mulAssign(ambientOcclusion);\n    }\n    reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);\n    reflectedLight.indirectSpecular.mulAssign(aoNode);\n  }\n  finish(context) {\n    const {\n      outgoingLight\n    } = context;\n    if (this.clearcoat === true) {\n      const dotNVcc = transformedClearcoatNormalView.dot(positionViewDirection).clamp();\n      const Fcc = F_Schlick({\n        dotVH: dotNVcc,\n        f0: clearcoatF0,\n        f90: clearcoatF90\n      });\n      const clearcoatLight = outgoingLight.mul(clearcoat.mul(Fcc).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(clearcoat));\n      outgoingLight.assign(clearcoatLight);\n    }\n    if (this.sheen === true) {\n      const sheenEnergyComp = sheen.r.max(sheen.g).max(sheen.b).mul(0.157).oneMinus();\n      const sheenLight = outgoingLight.mul(sheenEnergyComp).add(this.sheenSpecularDirect, this.sheenSpecularIndirect);\n      outgoingLight.assign(sheenLight);\n    }\n  }\n}\nexport default PhysicalLightingModel;","map":{"version":3,"names":["BRDF_Lambert","BRDF_GGX","DFGApprox","EnvironmentBRDF","F_Schlick","Schlick_to_F0","BRDF_Sheen","LightingModel","diffuseColor","specularColor","specularF90","roughness","clearcoat","clearcoatRoughness","sheen","sheenRoughness","iridescence","iridescenceIOR","iridescenceThickness","ior","thickness","transmission","attenuationDistance","attenuationColor","dispersion","transformedNormalView","transformedClearcoatNormalView","transformedNormalWorld","positionViewDirection","positionWorld","tslFn","float","vec2","vec3","vec4","mat3","If","cond","mix","normalize","refract","length","clamp","log2","log","exp","smoothstep","div","cameraPosition","cameraProjectionMatrix","cameraViewMatrix","modelWorldMatrix","viewportResolution","viewportMipTexture","loop","getVolumeTransmissionRay","n","v","modelMatrix","refractionVector","negate","modelScale","xyz","mul","setLayout","name","type","inputs","applyIorToRoughness","sub","singleViewportMipTexture","getTransmissionSample","fragCoord","transmissionSample","uv","lod","x","bicubic","volumeAttenuation","transmissionDistance","notEqual","attenuationCoefficient","transmittance","getIBLVolumeRefraction","position","viewMatrix","projMatrix","transmittedLight","toVar","halfSpread","iors","add","start","end","i","element","transmissionRay","refractedRayExit","ndcPos","refractionCoords","xy","w","addAssign","divAssign","assign","y","oneMinus","a","attenuatedColor","rgb","dotNV","dot","F","transmittanceFactor","r","g","b","XYZ_TO_REC709","Fresnel0ToIor","fresnel0","sqrtF0","sqrt","IorToFresnel0","transmittedIor","incidentIor","pow2","evalSensitivity","OPD","shift","phase","Math","PI","val","pos","VAR","cos","z","evalIridescence","outsideIOR","eta2","cosTheta1","thinFilmThickness","baseF0","sinTheta2Sq","cosTheta2Sq","cosTheta2","R0","R12","f0","f90","dotVH","T121","phi12","lessThan","phi21","baseIOR","R1","toVec3","R23","phi23","phi","R123","r123","Rs","C0","I","Cm","m","Sm","max","IBLSheenBRDF","normal","viewDir","saturate","r2","DG","clearcoatF0","clearcoatF90","PhysicalLightingModel","constructor","anisotropy","clearcoatRadiance","clearcoatSpecularDirect","clearcoatSpecularIndirect","sheenSpecularDirect","sheenSpecularIndirect","iridescenceFresnel","iridescenceF0","context","temp","dotNVi","f","backdrop","backdropAlpha","mulAssign","computeMultiscattering","singleScatter","multiScatter","fab","Fr","FssEss","Ess","Ems","Favg","Fms","direct","lightDirection","lightColor","reflectedLight","dotNL","irradiance","dotNLcc","ccIrradiance","normalView","directDiffuse","directSpecular","USE_IRIDESCENCE","USE_ANISOTROPY","indirectDiffuse","indirectSpecular","radiance","iblIrradiance","dotNVcc","clearcoatEnv","singleScattering","multiScattering","cosineWeightedIrradiance","totalScattering","diffuse","ambientOcclusion","aoNV","aoExp","exp2","aoNode","pow","finish","outgoingLight","Fcc","clearcoatLight","sheenEnergyComp","sheenLight"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/functions/PhysicalLightingModel.js"],"sourcesContent":["import BRDF_Lambert from './BSDF/BRDF_Lambert.js';\nimport BRDF_GGX from './BSDF/BRDF_GGX.js';\nimport DFGApprox from './BSDF/DFGApprox.js';\nimport EnvironmentBRDF from './BSDF/EnvironmentBRDF.js';\nimport F_Schlick from './BSDF/F_Schlick.js';\nimport Schlick_to_F0 from './BSDF/Schlick_to_F0.js';\nimport BRDF_Sheen from './BSDF/BRDF_Sheen.js';\nimport LightingModel from '../core/LightingModel.js';\nimport { diffuseColor, specularColor, specularF90, roughness, clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness, ior, thickness, transmission, attenuationDistance, attenuationColor, dispersion } from '../core/PropertyNode.js';\nimport { transformedNormalView, transformedClearcoatNormalView, transformedNormalWorld } from '../accessors/NormalNode.js';\nimport { positionViewDirection, positionWorld } from '../accessors/PositionNode.js';\nimport { tslFn, float, vec2, vec3, vec4, mat3, If } from '../shadernode/ShaderNode.js';\nimport { cond } from '../math/CondNode.js';\nimport { mix, normalize, refract, length, clamp, log2, log, exp, smoothstep } from '../math/MathNode.js';\nimport { div } from '../math/OperatorNode.js';\nimport { cameraPosition, cameraProjectionMatrix, cameraViewMatrix } from '../accessors/CameraNode.js';\nimport { modelWorldMatrix } from '../accessors/ModelNode.js';\nimport { viewportResolution } from '../display/ViewportNode.js';\nimport { viewportMipTexture } from '../display/ViewportTextureNode.js';\nimport { loop } from '../utils/LoopNode.js';\n\n//\n// Transmission\n//\n\nconst getVolumeTransmissionRay = tslFn( ( [ n, v, thickness, ior, modelMatrix ] ) => {\n\n\t// Direction of refracted light.\n\tconst refractionVector = vec3( refract( v.negate(), normalize( n ), div( 1.0, ior ) ) );\n\n\t// Compute rotation-independant scaling of the model matrix.\n\tconst modelScale = vec3(\n\t\tlength( modelMatrix[ 0 ].xyz ),\n\t\tlength( modelMatrix[ 1 ].xyz ),\n\t\tlength( modelMatrix[ 2 ].xyz )\n\t);\n\n\t// The thickness is specified in local space.\n\treturn normalize( refractionVector ).mul( thickness.mul( modelScale ) );\n\n} ).setLayout( {\n\tname: 'getVolumeTransmissionRay',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'n', type: 'vec3' },\n\t\t{ name: 'v', type: 'vec3' },\n\t\t{ name: 'thickness', type: 'float' },\n\t\t{ name: 'ior', type: 'float' },\n\t\t{ name: 'modelMatrix', type: 'mat4' }\n\t]\n} );\n\nconst applyIorToRoughness = tslFn( ( [ roughness, ior ] ) => {\n\n\t// Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\n\t// an IOR of 1.5 results in the default amount of microfacet refraction.\n\treturn roughness.mul( clamp( ior.mul( 2.0 ).sub( 2.0 ), 0.0, 1.0 ) );\n\n} ).setLayout( {\n\tname: 'applyIorToRoughness',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'roughness', type: 'float' },\n\t\t{ name: 'ior', type: 'float' }\n\t]\n} );\n\nconst singleViewportMipTexture = viewportMipTexture();\n\nconst getTransmissionSample = tslFn( ( [ fragCoord, roughness, ior ] ) => {\n\n\tconst transmissionSample = singleViewportMipTexture.uv( fragCoord );\n\t//const transmissionSample = viewportMipTexture( fragCoord );\n\n\tconst lod = log2( float( viewportResolution.x ) ).mul( applyIorToRoughness( roughness, ior ) );\n\n\treturn transmissionSample.bicubic( lod );\n\n} );\n\nconst volumeAttenuation = tslFn( ( [ transmissionDistance, attenuationColor, attenuationDistance ] ) => {\n\n\tIf( attenuationDistance.notEqual( 0 ), () => {\n\n\t\t// Compute light attenuation using Beer's law.\n\t\tconst attenuationCoefficient = log( attenuationColor ).negate().div( attenuationDistance );\n\t\tconst transmittance = exp( attenuationCoefficient.negate().mul( transmissionDistance ) );\n\n\t\treturn transmittance;\n\n\t} );\n\n\t// Attenuation distance is +âˆž, i.e. the transmitted color is not attenuated at all.\n\treturn vec3( 1.0 );\n\n} ).setLayout( {\n\tname: 'volumeAttenuation',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'transmissionDistance', type: 'float' },\n\t\t{ name: 'attenuationColor', type: 'vec3' },\n\t\t{ name: 'attenuationDistance', type: 'float' }\n\t]\n} );\n\nconst getIBLVolumeRefraction = tslFn( ( [ n, v, roughness, diffuseColor, specularColor, specularF90, position, modelMatrix, viewMatrix, projMatrix, ior, thickness, attenuationColor, attenuationDistance, dispersion ] ) => {\n\n\tlet transmittedLight, transmittance;\n\n\tif ( dispersion ) {\n\n\t\ttransmittedLight = vec4().toVar();\n\t\ttransmittance = vec3().toVar();\n\n\t\tconst halfSpread = ior.sub( 1.0 ).mul( dispersion.mul( 0.025 ) );\n\t\tconst iors = vec3( ior.sub( halfSpread ), ior, ior.add( halfSpread ) );\n\n\t\tloop( { start: 0, end: 3 }, ( { i } ) => {\n\n\t\t\tconst ior = iors.element( i );\n\n\t\t\tconst transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tconst refractedRayExit = position.add( transmissionRay );\n\n\t\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n\t\t\tconst ndcPos = projMatrix.mul( viewMatrix.mul( vec4( refractedRayExit, 1.0 ) ) );\n\t\t\tconst refractionCoords = vec2( ndcPos.xy.div( ndcPos.w ) ).toVar();\n\t\t\trefractionCoords.addAssign( 1.0 );\n\t\t\trefractionCoords.divAssign( 2.0 );\n\t\t\trefractionCoords.assign( vec2( refractionCoords.x, refractionCoords.y.oneMinus() ) ); // webgpu\n\n\t\t\t// Sample framebuffer to get pixel the refracted ray hits.\n\t\t\tconst transmissionSample = getTransmissionSample( refractionCoords, roughness, ior );\n\n\t\t\ttransmittedLight.element( i ).assign( transmissionSample.element( i ) );\n\t\t\ttransmittedLight.a.addAssign( transmissionSample.a );\n\n\t\t\ttransmittance.element( i ).assign( diffuseColor.element( i ).mul( volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance ).element( i ) ) );\n\n\t\t} );\n\n\t\ttransmittedLight.a.divAssign( 3.0 );\n\n\t} else {\n\n\t\tconst transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tconst refractedRayExit = position.add( transmissionRay );\n\n\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n\t\tconst ndcPos = projMatrix.mul( viewMatrix.mul( vec4( refractedRayExit, 1.0 ) ) );\n\t\tconst refractionCoords = vec2( ndcPos.xy.div( ndcPos.w ) ).toVar();\n\t\trefractionCoords.addAssign( 1.0 );\n\t\trefractionCoords.divAssign( 2.0 );\n\t\trefractionCoords.assign( vec2( refractionCoords.x, refractionCoords.y.oneMinus() ) ); // webgpu\n\n\t\t// Sample framebuffer to get pixel the refracted ray hits.\n\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\ttransmittance = diffuseColor.mul( volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance ) );\n\n\t}\n\n\tconst attenuatedColor = transmittance.rgb.mul( transmittedLight.rgb );\n\tconst dotNV = n.dot( v ).clamp();\n\n\t// Get the specular component.\n\tconst F = vec3( EnvironmentBRDF( { // n, v, specularColor, specularF90, roughness\n\t\tdotNV,\n\t\tspecularColor,\n\t\tspecularF90,\n\t\troughness\n\t} ) );\n\n\t// As less light is transmitted, the opacity should be increased. This simple approximation does a decent job\n\t// of modulating a CSS background, and has no effect when the buffer is opaque, due to a solid object or clear color.\n\tconst transmittanceFactor = transmittance.r.add( transmittance.g, transmittance.b ).div( 3.0 );\n\n\treturn vec4( F.oneMinus().mul( attenuatedColor ), transmittedLight.a.oneMinus().mul( transmittanceFactor ).oneMinus() );\n\n} );\n\n//\n// Iridescence\n//\n\n// XYZ to linear-sRGB color space\nconst XYZ_TO_REC709 = mat3(\n\t3.2404542, - 0.9692660, 0.0556434,\n\t- 1.5371385, 1.8760108, - 0.2040259,\n\t- 0.4985314, 0.0415560, 1.0572252\n);\n\n// Assume air interface for top\n// Note: We don't handle the case fresnel0 == 1\nconst Fresnel0ToIor = ( fresnel0 ) => {\n\n\tconst sqrtF0 = fresnel0.sqrt();\n\treturn vec3( 1.0 ).add( sqrtF0 ).div( vec3( 1.0 ).sub( sqrtF0 ) );\n\n};\n\n// ior is a value between 1.0 and 3.0. 1.0 is air interface\nconst IorToFresnel0 = ( transmittedIor, incidentIor ) => {\n\n\treturn transmittedIor.sub( incidentIor ).div( transmittedIor.add( incidentIor ) ).pow2();\n\n};\n\n// Fresnel equations for dielectric/dielectric interfaces.\n// Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\n// Evaluation XYZ sensitivity curves in Fourier space\nconst evalSensitivity = ( OPD, shift ) => {\n\n\tconst phase = OPD.mul( 2.0 * Math.PI * 1.0e-9 );\n\tconst val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\tconst pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\tconst VAR = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\n\tconst x = float( 9.7470e-14 * Math.sqrt( 2.0 * Math.PI * 4.5282e+09 ) ).mul( phase.mul( 2.2399e+06 ).add( shift.x ).cos() ).mul( phase.pow2().mul( - 4.5282e+09 ).exp() );\n\n\tlet xyz = val.mul( VAR.mul( 2.0 * Math.PI ).sqrt() ).mul( pos.mul( phase ).add( shift ).cos() ).mul( phase.pow2().negate().mul( VAR ).exp() );\n\txyz = vec3( xyz.x.add( x ), xyz.y, xyz.z ).div( 1.0685e-7 );\n\n\tconst rgb = XYZ_TO_REC709.mul( xyz );\n\n\treturn rgb;\n\n};\n\nconst evalIridescence = tslFn( ( { outsideIOR, eta2, cosTheta1, thinFilmThickness, baseF0 } ) => {\n\n\t// Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0\n\tconst iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t// Evaluate the cosTheta on the base layer (Snell law)\n\tconst sinTheta2Sq = outsideIOR.div( iridescenceIOR ).pow2().mul( float( 1 ).sub( cosTheta1.pow2() ) );\n\n\t// Handle TIR:\n\tconst cosTheta2Sq = float( 1 ).sub( sinTheta2Sq );\n\t/*if ( cosTheta2Sq < 0.0 ) {\n\n\t\t\treturn vec3( 1.0 );\n\n\t}*/\n\n\tconst cosTheta2 = cosTheta2Sq.sqrt();\n\n\t// First interface\n\tconst R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\tconst R12 = F_Schlick( { f0: R0, f90: 1.0, dotVH: cosTheta1 } );\n\t//const R21 = R12;\n\tconst T121 = R12.oneMinus();\n\tconst phi12 = iridescenceIOR.lessThan( outsideIOR ).cond( Math.PI, 0.0 );\n\tconst phi21 = float( Math.PI ).sub( phi12 );\n\n\t// Second interface\n\tconst baseIOR = Fresnel0ToIor( baseF0.clamp( 0.0, 0.9999 ) ); // guard against 1.0\n\tconst R1 = IorToFresnel0( baseIOR, iridescenceIOR.toVec3() );\n\tconst R23 = F_Schlick( { f0: R1, f90: 1.0, dotVH: cosTheta2 } );\n\tconst phi23 = vec3(\n\t\tbaseIOR.x.lessThan( iridescenceIOR ).cond( Math.PI, 0.0 ),\n\t\tbaseIOR.y.lessThan( iridescenceIOR ).cond( Math.PI, 0.0 ),\n\t\tbaseIOR.z.lessThan( iridescenceIOR ).cond( Math.PI, 0.0 )\n\t);\n\n\t// Phase shift\n\tconst OPD = iridescenceIOR.mul( thinFilmThickness, cosTheta2, 2.0 );\n\tconst phi = vec3( phi21 ).add( phi23 );\n\n\t// Compound terms\n\tconst R123 = R12.mul( R23 ).clamp( 1e-5, 0.9999 );\n\tconst r123 = R123.sqrt();\n\tconst Rs = T121.pow2().mul( R23 ).div( vec3( 1.0 ).sub( R123 ) );\n\n\t// Reflectance term for m = 0 (DC term amplitude)\n\tconst C0 = R12.add( Rs );\n\tlet I = C0;\n\n\t// Reflectance term for m > 0 (pairs of diracs)\n\tlet Cm = Rs.sub( T121 );\n\tfor ( let m = 1; m <= 2; ++ m ) {\n\n\t\tCm = Cm.mul( r123 );\n\t\tconst Sm = evalSensitivity( float( m ).mul( OPD ), float( m ).mul( phi ) ).mul( 2.0 );\n\t\tI = I.add( Cm.mul( Sm ) );\n\n\t}\n\n\t// Since out of gamut colors might be produced, negative color values are clamped to 0.\n\treturn I.max( vec3( 0.0 ) );\n\n} ).setLayout( {\n\tname: 'evalIridescence',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'outsideIOR', type: 'float' },\n\t\t{ name: 'eta2', type: 'float' },\n\t\t{ name: 'cosTheta1', type: 'float' },\n\t\t{ name: 'thinFilmThickness', type: 'float' },\n\t\t{ name: 'baseF0', type: 'vec3' }\n\t]\n} );\n\n//\n//\tSheen\n//\n\n// This is a curve-fit approxmation to the \"Charlie sheen\" BRDF integrated over the hemisphere from\n// Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\". The analysis can be found\n// in the Sheen section of https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing\nconst IBLSheenBRDF = tslFn( ( { normal, viewDir, roughness } ) => {\n\n\tconst dotNV = normal.dot( viewDir ).saturate();\n\n\tconst r2 = roughness.pow2();\n\n\tconst a = cond(\n\t\troughness.lessThan( 0.25 ),\n\t\tfloat( - 339.2 ).mul( r2 ).add( float( 161.4 ).mul( roughness ) ).sub( 25.9 ),\n\t\tfloat( - 8.48 ).mul( r2 ).add( float( 14.3 ).mul( roughness ) ).sub( 9.95 )\n\t);\n\n\tconst b = cond(\n\t\troughness.lessThan( 0.25 ),\n\t\tfloat( 44.0 ).mul( r2 ).sub( float( 23.7 ).mul( roughness ) ).add( 3.26 ),\n\t\tfloat( 1.97 ).mul( r2 ).sub( float( 3.27 ).mul( roughness ) ).add( 0.72 )\n\t);\n\n\tconst DG = cond( roughness.lessThan( 0.25 ), 0.0, float( 0.1 ).mul( roughness ).sub( 0.025 ) ).add( a.mul( dotNV ).add( b ).exp() );\n\n\treturn DG.mul( 1.0 / Math.PI ).saturate();\n\n} );\n\nconst clearcoatF0 = vec3( 0.04 );\nconst clearcoatF90 = float( 1 );\n\n//\n\nclass PhysicalLightingModel extends LightingModel {\n\n\tconstructor( clearcoat = false, sheen = false, iridescence = false, anisotropy = false, transmission = false, dispersion = false ) {\n\n\t\tsuper();\n\n\t\tthis.clearcoat = clearcoat;\n\t\tthis.sheen = sheen;\n\t\tthis.iridescence = iridescence;\n\t\tthis.anisotropy = anisotropy;\n\t\tthis.transmission = transmission;\n\t\tthis.dispersion = dispersion;\n\n\t\tthis.clearcoatRadiance = null;\n\t\tthis.clearcoatSpecularDirect = null;\n\t\tthis.clearcoatSpecularIndirect = null;\n\t\tthis.sheenSpecularDirect = null;\n\t\tthis.sheenSpecularIndirect = null;\n\t\tthis.iridescenceFresnel = null;\n\t\tthis.iridescenceF0 = null;\n\n\t}\n\n\tstart( context ) {\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tthis.clearcoatRadiance = vec3().temp( 'clearcoatRadiance' );\n\t\t\tthis.clearcoatSpecularDirect = vec3().temp( 'clearcoatSpecularDirect' );\n\t\t\tthis.clearcoatSpecularIndirect = vec3().temp( 'clearcoatSpecularIndirect' );\n\n\t\t}\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularDirect = vec3().temp( 'sheenSpecularDirect' );\n\t\t\tthis.sheenSpecularIndirect = vec3().temp( 'sheenSpecularIndirect' );\n\n\t\t}\n\n\t\tif ( this.iridescence === true ) {\n\n\t\t\tconst dotNVi = transformedNormalView.dot( positionViewDirection ).clamp();\n\n\t\t\tthis.iridescenceFresnel = evalIridescence( {\n\t\t\t\toutsideIOR: float( 1.0 ),\n\t\t\t\teta2: iridescenceIOR,\n\t\t\t\tcosTheta1: dotNVi,\n\t\t\t\tthinFilmThickness: iridescenceThickness,\n\t\t\t\tbaseF0: specularColor\n\t\t\t} );\n\n\t\t\tthis.iridescenceF0 = Schlick_to_F0( { f: this.iridescenceFresnel, f90: 1.0, dotVH: dotNVi } );\n\n\t\t}\n\n\t\tif ( this.transmission === true ) {\n\n\t\t\tconst position = positionWorld;\n\t\t\tconst v = cameraPosition.sub( positionWorld ).normalize(); // TODO: Create Node for this, same issue in MaterialX\n\t\t\tconst n = transformedNormalWorld;\n\n\t\t\tcontext.backdrop = getIBLVolumeRefraction(\n\t\t\t\tn,\n\t\t\t\tv,\n\t\t\t\troughness,\n\t\t\t\tdiffuseColor,\n\t\t\t\tspecularColor,\n\t\t\t\tspecularF90, // specularF90\n\t\t\t\tposition, // positionWorld\n\t\t\t\tmodelWorldMatrix, // modelMatrix\n\t\t\t\tcameraViewMatrix, // viewMatrix\n\t\t\t\tcameraProjectionMatrix, // projMatrix\n\t\t\t\tior,\n\t\t\t\tthickness,\n\t\t\t\tattenuationColor,\n\t\t\t\tattenuationDistance,\n\t\t\t\tthis.dispersion ? dispersion : null\n\t\t\t);\n\n\t\t\tcontext.backdropAlpha = transmission;\n\n\t\t\tdiffuseColor.a.mulAssign( mix( 1, context.backdrop.a, transmission ) );\n\n\t\t}\n\n\t}\n\n\t// Fdez-AgÃ¼era's \"Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting\"\n\t// Approximates multiscattering in order to preserve energy.\n\t// http://www.jcgt.org/published/0008/01/03/\n\n\tcomputeMultiscattering( singleScatter, multiScatter, specularF90 ) {\n\n\t\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\n\n\t\tconst fab = DFGApprox( { roughness, dotNV } );\n\n\t\tconst Fr = this.iridescenceF0 ? iridescence.mix( specularColor, this.iridescenceF0 ) : specularColor;\n\n\t\tconst FssEss = Fr.mul( fab.x ).add( specularF90.mul( fab.y ) );\n\n\t\tconst Ess = fab.x.add( fab.y );\n\t\tconst Ems = Ess.oneMinus();\n\n\t\tconst Favg = specularColor.add( specularColor.oneMinus().mul( 0.047619 ) ); // 1/21\n\t\tconst Fms = FssEss.mul( Favg ).div( Ems.mul( Favg ).oneMinus() );\n\n\t\tsingleScatter.addAssign( FssEss );\n\t\tmultiScatter.addAssign( Fms.mul( Ems ) );\n\n\t}\n\n\tdirect( { lightDirection, lightColor, reflectedLight } ) {\n\n\t\tconst dotNL = transformedNormalView.dot( lightDirection ).clamp();\n\t\tconst irradiance = dotNL.mul( lightColor );\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularDirect.addAssign( irradiance.mul( BRDF_Sheen( { lightDirection } ) ) );\n\n\t\t}\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tconst dotNLcc = transformedClearcoatNormalView.dot( lightDirection ).clamp();\n\t\t\tconst ccIrradiance = dotNLcc.mul( lightColor );\n\n\t\t\tthis.clearcoatSpecularDirect.addAssign( ccIrradiance.mul( BRDF_GGX( { lightDirection, f0: clearcoatF0, f90: clearcoatF90, roughness: clearcoatRoughness, normalView: transformedClearcoatNormalView } ) ) );\n\n\t\t}\n\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\n\n\t\treflectedLight.directSpecular.addAssign( irradiance.mul( BRDF_GGX( { lightDirection, f0: specularColor, f90: 1, roughness, iridescence: this.iridescence, f: this.iridescenceFresnel, USE_IRIDESCENCE: this.iridescence, USE_ANISOTROPY: this.anisotropy } ) ) );\n\n\t}\n\n\tindirectDiffuse( { irradiance, reflectedLight } ) {\n\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\n\n\t}\n\n\tindirectSpecular( { radiance, iblIrradiance, reflectedLight } ) {\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularIndirect.addAssign( iblIrradiance.mul(\n\t\t\t\tsheen,\n\t\t\t\tIBLSheenBRDF( {\n\t\t\t\t\tnormal: transformedNormalView,\n\t\t\t\t\tviewDir: positionViewDirection,\n\t\t\t\t\troughness: sheenRoughness\n\t\t\t\t} )\n\t\t\t) );\n\n\t\t}\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tconst dotNVcc = transformedClearcoatNormalView.dot( positionViewDirection ).clamp();\n\n\t\t\tconst clearcoatEnv = EnvironmentBRDF( {\n\t\t\t\tdotNV: dotNVcc,\n\t\t\t\tspecularColor: clearcoatF0,\n\t\t\t\tspecularF90: clearcoatF90,\n\t\t\t\troughness: clearcoatRoughness\n\t\t\t} );\n\n\t\t\tthis.clearcoatSpecularIndirect.addAssign( this.clearcoatRadiance.mul( clearcoatEnv ) );\n\n\t\t}\n\n\t\t// Both indirect specular and indirect diffuse light accumulate here\n\n\t\tconst singleScattering = vec3().temp( 'singleScattering' );\n\t\tconst multiScattering = vec3().temp( 'multiScattering' );\n\t\tconst cosineWeightedIrradiance = iblIrradiance.mul( 1 / Math.PI );\n\n\t\tthis.computeMultiscattering( singleScattering, multiScattering, specularF90 );\n\n\t\tconst totalScattering = singleScattering.add( multiScattering );\n\n\t\tconst diffuse = diffuseColor.mul( totalScattering.r.max( totalScattering.g ).max( totalScattering.b ).oneMinus() );\n\n\t\treflectedLight.indirectSpecular.addAssign( radiance.mul( singleScattering ) );\n\t\treflectedLight.indirectSpecular.addAssign( multiScattering.mul( cosineWeightedIrradiance ) );\n\n\t\treflectedLight.indirectDiffuse.addAssign( diffuse.mul( cosineWeightedIrradiance ) );\n\n\t}\n\n\tambientOcclusion( { ambientOcclusion, reflectedLight } ) {\n\n\t\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\n\n\t\tconst aoNV = dotNV.add( ambientOcclusion );\n\t\tconst aoExp = roughness.mul( - 16.0 ).oneMinus().negate().exp2();\n\n\t\tconst aoNode = ambientOcclusion.sub( aoNV.pow( aoExp ).oneMinus() ).clamp();\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tthis.clearcoatSpecularIndirect.mulAssign( ambientOcclusion );\n\n\t\t}\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularIndirect.mulAssign( ambientOcclusion );\n\n\t\t}\n\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\n\t\treflectedLight.indirectSpecular.mulAssign( aoNode );\n\n\t}\n\n\tfinish( context ) {\n\n\t\tconst { outgoingLight } = context;\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tconst dotNVcc = transformedClearcoatNormalView.dot( positionViewDirection ).clamp();\n\n\t\t\tconst Fcc = F_Schlick( {\n\t\t\t\tdotVH: dotNVcc,\n\t\t\t\tf0: clearcoatF0,\n\t\t\t\tf90: clearcoatF90\n\t\t\t} );\n\n\t\t\tconst clearcoatLight = outgoingLight.mul( clearcoat.mul( Fcc ).oneMinus() ).add( this.clearcoatSpecularDirect.add( this.clearcoatSpecularIndirect ).mul( clearcoat ) );\n\n\t\t\toutgoingLight.assign( clearcoatLight );\n\n\t\t}\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tconst sheenEnergyComp = sheen.r.max( sheen.g ).max( sheen.b ).mul( 0.157 ).oneMinus();\n\t\t\tconst sheenLight = outgoingLight.mul( sheenEnergyComp ).add( this.sheenSpecularDirect, this.sheenSpecularIndirect );\n\n\t\t\toutgoingLight.assign( sheenLight );\n\n\t\t}\n\n\t}\n\n}\n\nexport default PhysicalLightingModel;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}