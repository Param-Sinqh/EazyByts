{"ast":null,"code":"import TextureNode from './TextureNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { nodeProxy, vec3, tslFn, If } from '../shadernode/ShaderNode.js';\nconst normal = tslFn(({\n  texture,\n  uv\n}) => {\n  const epsilon = 0.0001;\n  const ret = vec3().temp();\n  If(uv.x.lessThan(epsilon), () => {\n    ret.assign(vec3(1, 0, 0));\n  }).elseif(uv.y.lessThan(epsilon), () => {\n    ret.assign(vec3(0, 1, 0));\n  }).elseif(uv.z.lessThan(epsilon), () => {\n    ret.assign(vec3(0, 0, 1));\n  }).elseif(uv.x.greaterThan(1 - epsilon), () => {\n    ret.assign(vec3(-1, 0, 0));\n  }).elseif(uv.y.greaterThan(1 - epsilon), () => {\n    ret.assign(vec3(0, -1, 0));\n  }).elseif(uv.z.greaterThan(1 - epsilon), () => {\n    ret.assign(vec3(0, 0, -1));\n  }).else(() => {\n    const step = 0.01;\n    const x = texture.uv(uv.add(vec3(-step, 0.0, 0.0))).r.sub(texture.uv(uv.add(vec3(step, 0.0, 0.0))).r);\n    const y = texture.uv(uv.add(vec3(0.0, -step, 0.0))).r.sub(texture.uv(uv.add(vec3(0.0, step, 0.0))).r);\n    const z = texture.uv(uv.add(vec3(0.0, 0.0, -step))).r.sub(texture.uv(uv.add(vec3(0.0, 0.0, step))).r);\n    ret.assign(vec3(x, y, z));\n  });\n  return ret.normalize();\n});\nclass Texture3DNode extends TextureNode {\n  constructor(value, uvNode = null, levelNode = null) {\n    super(value, uvNode, levelNode);\n    this.isTexture3DNode = true;\n  }\n  getInputType( /*builder*/\n  ) {\n    return 'texture3D';\n  }\n  getDefaultUV() {\n    return vec3(0.5, 0.5, 0.5);\n  }\n  setUpdateMatrix( /*updateMatrix*/) {} // Ignore .updateMatrix for 3d TextureNode\n\n  setupUV(builder, uvNode) {\n    return uvNode;\n  }\n  generateUV(builder, uvNode) {\n    return uvNode.build(builder, 'vec3');\n  }\n  normal(uvNode) {\n    return normal({\n      texture: this,\n      uv: uvNode\n    });\n  }\n}\nexport default Texture3DNode;\nexport const texture3D = nodeProxy(Texture3DNode);\naddNodeClass('Texture3DNode', Texture3DNode);","map":{"version":3,"names":["TextureNode","addNodeClass","nodeProxy","vec3","tslFn","If","normal","texture","uv","epsilon","ret","temp","x","lessThan","assign","elseif","y","z","greaterThan","else","step","add","r","sub","normalize","Texture3DNode","constructor","value","uvNode","levelNode","isTexture3DNode","getInputType","getDefaultUV","setUpdateMatrix","setupUV","builder","generateUV","build","texture3D"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/accessors/Texture3DNode.js"],"sourcesContent":["import TextureNode from './TextureNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { nodeProxy, vec3, tslFn, If } from '../shadernode/ShaderNode.js';\n\nconst normal = tslFn( ( { texture, uv } ) => {\n\n\tconst epsilon = 0.0001;\n\n\tconst ret = vec3().temp();\n\n\tIf( uv.x.lessThan( epsilon ), () => {\n\n\t\tret.assign( vec3( 1, 0, 0 ) );\n\n\t} ).elseif( uv.y.lessThan( epsilon ), () => {\n\n\t\tret.assign( vec3( 0, 1, 0 ) );\n\n\t} ).elseif( uv.z.lessThan( epsilon ), () => {\n\n\t\tret.assign( vec3( 0, 0, 1 ) );\n\n\t} ).elseif( uv.x.greaterThan( 1 - epsilon ), () => {\n\n\t\tret.assign( vec3( - 1, 0, 0 ) );\n\n\t} ).elseif( uv.y.greaterThan( 1 - epsilon ), () => {\n\n\t\tret.assign( vec3( 0, - 1, 0 ) );\n\n\t} ).elseif( uv.z.greaterThan( 1 - epsilon ), () => {\n\n\t\tret.assign( vec3( 0, 0, - 1 ) );\n\n\t} ).else( () => {\n\n\t\tconst step = 0.01;\n\n\t\tconst x = texture.uv( uv.add( vec3( - step, 0.0, 0.0 ) ) ).r.sub( texture.uv( uv.add( vec3( step, 0.0, 0.0 ) ) ).r );\n\t\tconst y = texture.uv( uv.add( vec3( 0.0, - step, 0.0 ) ) ).r.sub( texture.uv( uv.add( vec3( 0.0, step, 0.0 ) ) ).r );\n\t\tconst z = texture.uv( uv.add( vec3( 0.0, 0.0, - step ) ) ).r.sub( texture.uv( uv.add( vec3( 0.0, 0.0, step ) ) ).r );\n\n\t\tret.assign( vec3( x, y, z ) );\n\n\t} );\n\n\treturn ret.normalize();\n\n} );\n\n\nclass Texture3DNode extends TextureNode {\n\n\tconstructor( value, uvNode = null, levelNode = null ) {\n\n\t\tsuper( value, uvNode, levelNode );\n\n\t\tthis.isTexture3DNode = true;\n\n\t}\n\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'texture3D';\n\n\t}\n\n\tgetDefaultUV() {\n\n\t\treturn vec3( 0.5, 0.5, 0.5 );\n\n\t}\n\n\tsetUpdateMatrix( /*updateMatrix*/ ) { } // Ignore .updateMatrix for 3d TextureNode\n\n\tsetupUV( builder, uvNode ) {\n\n\t\treturn uvNode;\n\n\t}\n\n\tgenerateUV( builder, uvNode ) {\n\n\t\treturn uvNode.build( builder, 'vec3' );\n\n\t}\n\n\tnormal( uvNode ) {\n\n\t\treturn normal( { texture: this, uv: uvNode } );\n\n\t}\n\n}\n\nexport default Texture3DNode;\n\nexport const texture3D = nodeProxy( Texture3DNode );\n\naddNodeClass( 'Texture3DNode', Texture3DNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}