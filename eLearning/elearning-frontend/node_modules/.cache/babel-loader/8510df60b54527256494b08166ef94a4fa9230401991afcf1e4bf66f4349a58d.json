{"ast":null,"code":"import { addNodeClass } from '../core/Node.js';\nimport { nodeObject } from '../shadernode/ShaderNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { getValueType } from '../core/NodeUtils.js';\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\nimport BufferNode from './BufferNode.js';\nclass UniformsElementNode extends ArrayElementNode {\n  constructor(arrayBuffer, indexNode) {\n    super(arrayBuffer, indexNode);\n    this.isArrayBufferElementNode = true;\n  }\n  getNodeType(builder) {\n    return this.node.getElementType(builder);\n  }\n  generate(builder) {\n    const snippet = super.generate(builder);\n    const type = this.getNodeType();\n    return builder.format(snippet, 'vec4', type);\n  }\n}\nclass UniformsNode extends BufferNode {\n  constructor(value, elementType = null) {\n    super(null, 'vec4');\n    this.array = value;\n    this.elementType = elementType;\n    this._elementType = null;\n    this._elementLength = 0;\n    this.updateType = NodeUpdateType.RENDER;\n    this.isArrayBufferNode = true;\n  }\n  getElementType() {\n    return this.elementType || this._elementType;\n  }\n  getElementLength() {\n    return this._elementLength;\n  }\n  update( /*frame*/\n  ) {\n    const {\n      array,\n      value\n    } = this;\n    const elementLength = this.getElementLength();\n    const elementType = this.getElementType();\n    if (elementLength === 1) {\n      for (let i = 0; i < array.length; i++) {\n        const index = i * 4;\n        value[index] = array[i];\n      }\n    } else if (elementType === 'color') {\n      for (let i = 0; i < array.length; i++) {\n        const index = i * 4;\n        const vector = array[i];\n        value[index] = vector.r;\n        value[index + 1] = vector.g;\n        value[index + 2] = vector.b || 0;\n        //value[ index + 3 ] = vector.a || 0;\n      }\n    } else {\n      for (let i = 0; i < array.length; i++) {\n        const index = i * 4;\n        const vector = array[i];\n        value[index] = vector.x;\n        value[index + 1] = vector.y;\n        value[index + 2] = vector.z || 0;\n        value[index + 3] = vector.w || 0;\n      }\n    }\n  }\n  setup(builder) {\n    const length = this.array.length;\n    this._elementType = this.elementType === null ? getValueType(this.array[0]) : this.elementType;\n    this._elementLength = builder.getTypeLength(this._elementType);\n    this.value = new Float32Array(length * 4);\n    this.bufferCount = length;\n    return super.setup(builder);\n  }\n  element(indexNode) {\n    return nodeObject(new UniformsElementNode(this, nodeObject(indexNode)));\n  }\n}\nexport default UniformsNode;\nexport const uniforms = (values, nodeType) => nodeObject(new UniformsNode(values, nodeType));\naddNodeClass('UniformsNode', UniformsNode);","map":{"version":3,"names":["addNodeClass","nodeObject","NodeUpdateType","getValueType","ArrayElementNode","BufferNode","UniformsElementNode","constructor","arrayBuffer","indexNode","isArrayBufferElementNode","getNodeType","builder","node","getElementType","generate","snippet","type","format","UniformsNode","value","elementType","array","_elementType","_elementLength","updateType","RENDER","isArrayBufferNode","getElementLength","update","elementLength","i","length","index","vector","r","g","b","x","y","z","w","setup","getTypeLength","Float32Array","bufferCount","element","uniforms","values","nodeType"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/accessors/UniformsNode.js"],"sourcesContent":["import { addNodeClass } from '../core/Node.js';\nimport { nodeObject } from '../shadernode/ShaderNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { getValueType } from '../core/NodeUtils.js';\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\nimport BufferNode from './BufferNode.js';\n\nclass UniformsElementNode extends ArrayElementNode {\n\n\tconstructor( arrayBuffer, indexNode ) {\n\n\t\tsuper( arrayBuffer, indexNode );\n\n\t\tthis.isArrayBufferElementNode = true;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.node.getElementType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst snippet = super.generate( builder );\n\t\tconst type = this.getNodeType();\n\n\t\treturn builder.format( snippet, 'vec4', type );\n\n\t}\n\n}\n\nclass UniformsNode extends BufferNode {\n\n\tconstructor( value, elementType = null ) {\n\n\t\tsuper( null, 'vec4' );\n\n\t\tthis.array = value;\n\t\tthis.elementType = elementType;\n\n\t\tthis._elementType = null;\n\t\tthis._elementLength = 0;\n\n\t\tthis.updateType = NodeUpdateType.RENDER;\n\n\t\tthis.isArrayBufferNode = true;\n\n\t}\n\n\tgetElementType() {\n\n\t\treturn this.elementType || this._elementType;\n\n\t}\n\n\tgetElementLength() {\n\n\t\treturn this._elementLength;\n\n\t}\n\n\tupdate( /*frame*/ ) {\n\n\t\tconst { array, value } = this;\n\n\t\tconst elementLength = this.getElementLength();\n\t\tconst elementType = this.getElementType();\n\n\t\tif ( elementLength === 1 ) {\n\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\n\n\t\t\t\tconst index = i * 4;\n\n\t\t\t\tvalue[ index ] = array[ i ];\n\n\t\t\t}\n\n\t\t} else if ( elementType === 'color' ) {\n\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\n\n\t\t\t\tconst index = i * 4;\n\t\t\t\tconst vector = array[ i ];\n\n\t\t\t\tvalue[ index ] = vector.r;\n\t\t\t\tvalue[ index + 1 ] = vector.g;\n\t\t\t\tvalue[ index + 2 ] = vector.b || 0;\n\t\t\t\t//value[ index + 3 ] = vector.a || 0;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\n\n\t\t\t\tconst index = i * 4;\n\t\t\t\tconst vector = array[ i ];\n\n\t\t\t\tvalue[ index ] = vector.x;\n\t\t\t\tvalue[ index + 1 ] = vector.y;\n\t\t\t\tvalue[ index + 2 ] = vector.z || 0;\n\t\t\t\tvalue[ index + 3 ] = vector.w || 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst length = this.array.length;\n\n\t\tthis._elementType = this.elementType === null ? getValueType( this.array[ 0 ] ) : this.elementType;\n\t\tthis._elementLength = builder.getTypeLength( this._elementType );\n\n\t\tthis.value = new Float32Array( length * 4 );\n\t\tthis.bufferCount = length;\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\telement( indexNode ) {\n\n\t\treturn nodeObject( new UniformsElementNode( this, nodeObject( indexNode ) ) );\n\n\t}\n\n}\n\nexport default UniformsNode;\n\nexport const uniforms = ( values, nodeType ) => nodeObject( new UniformsNode( values, nodeType ) );\n\naddNodeClass( 'UniformsNode', UniformsNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}