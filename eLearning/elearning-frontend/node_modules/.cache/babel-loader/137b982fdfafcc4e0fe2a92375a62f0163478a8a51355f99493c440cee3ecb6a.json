{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { texture } from './TextureNode.js';\nimport { buffer } from './BufferNode.js';\nimport { nodeObject } from '../shadernode/ShaderNode.js';\nimport { uniforms } from './UniformsNode.js';\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\nclass ReferenceElementNode extends ArrayElementNode {\n  constructor(referenceNode, indexNode) {\n    super(referenceNode, indexNode);\n    this.referenceNode = referenceNode;\n    this.isReferenceElementNode = true;\n  }\n  getNodeType() {\n    return this.referenceNode.uniformType;\n  }\n  generate(builder) {\n    const snippet = super.generate(builder);\n    const arrayType = this.referenceNode.getNodeType();\n    const elementType = this.getNodeType();\n    return builder.format(snippet, arrayType, elementType);\n  }\n}\nclass ReferenceNode extends Node {\n  constructor(property, uniformType, object = null, count = null) {\n    super();\n    this.property = property;\n    this.uniformType = uniformType;\n    this.object = object;\n    this.count = count;\n    this.properties = property.split('.');\n    this.reference = null;\n    this.node = null;\n    this.updateType = NodeUpdateType.OBJECT;\n  }\n  element(indexNode) {\n    return nodeObject(new ReferenceElementNode(this, nodeObject(indexNode)));\n  }\n  setNodeType(uniformType) {\n    let node = null;\n    if (this.count !== null) {\n      node = buffer(null, uniformType, this.count);\n    } else if (Array.isArray(this.getValueFromReference())) {\n      node = uniforms(null, uniformType);\n    } else if (uniformType === 'texture') {\n      node = texture(null);\n    } else {\n      node = uniform(null, uniformType);\n    }\n    this.node = node;\n  }\n  getNodeType(builder) {\n    if (this.node === null) {\n      this.updateValue();\n    }\n    return this.node.getNodeType(builder);\n  }\n  getValueFromReference(object = this.reference) {\n    const {\n      properties\n    } = this;\n    let value = object[properties[0]];\n    for (let i = 1; i < properties.length; i++) {\n      value = value[properties[i]];\n    }\n    return value;\n  }\n  updateReference(state) {\n    this.reference = this.object !== null ? this.object : state.object;\n    return this.reference;\n  }\n  setup() {\n    this.updateValue();\n    return this.node;\n  }\n  update( /*frame*/\n  ) {\n    this.updateValue();\n  }\n  updateValue() {\n    if (this.node === null) this.setNodeType(this.uniformType);\n    const value = this.getValueFromReference();\n    if (Array.isArray(value)) {\n      this.node.array = value;\n    } else {\n      this.node.value = value;\n    }\n  }\n}\nexport default ReferenceNode;\nexport const reference = (name, type, object) => nodeObject(new ReferenceNode(name, type, object));\nexport const referenceBuffer = (name, type, count, object) => nodeObject(new ReferenceNode(name, type, object, count));\naddNodeClass('ReferenceNode', ReferenceNode);","map":{"version":3,"names":["Node","addNodeClass","NodeUpdateType","uniform","texture","buffer","nodeObject","uniforms","ArrayElementNode","ReferenceElementNode","constructor","referenceNode","indexNode","isReferenceElementNode","getNodeType","uniformType","generate","builder","snippet","arrayType","elementType","format","ReferenceNode","property","object","count","properties","split","reference","node","updateType","OBJECT","element","setNodeType","Array","isArray","getValueFromReference","updateValue","value","i","length","updateReference","state","setup","update","array","name","type","referenceBuffer"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/accessors/ReferenceNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { texture } from './TextureNode.js';\nimport { buffer } from './BufferNode.js';\nimport { nodeObject } from '../shadernode/ShaderNode.js';\nimport { uniforms } from './UniformsNode.js';\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\n\nclass ReferenceElementNode extends ArrayElementNode {\n\n\tconstructor( referenceNode, indexNode ) {\n\n\t\tsuper( referenceNode, indexNode );\n\n\t\tthis.referenceNode = referenceNode;\n\n\t\tthis.isReferenceElementNode = true;\n\n\t}\n\n\tgetNodeType() {\n\n\t\treturn this.referenceNode.uniformType;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst snippet = super.generate( builder );\n\t\tconst arrayType = this.referenceNode.getNodeType();\n\t\tconst elementType = this.getNodeType();\n\n\t\treturn builder.format( snippet, arrayType, elementType );\n\n\t}\n\n}\n\nclass ReferenceNode extends Node {\n\n\tconstructor( property, uniformType, object = null, count = null ) {\n\n\t\tsuper();\n\n\t\tthis.property = property;\n\t\tthis.uniformType = uniformType;\n\t\tthis.object = object;\n\t\tthis.count = count;\n\n\t\tthis.properties = property.split( '.' );\n\t\tthis.reference = null;\n\t\tthis.node = null;\n\n\t\tthis.updateType = NodeUpdateType.OBJECT;\n\n\t}\n\n\telement( indexNode ) {\n\n\t\treturn nodeObject( new ReferenceElementNode( this, nodeObject( indexNode ) ) );\n\n\t}\n\n\tsetNodeType( uniformType ) {\n\n\t\tlet node = null;\n\n\t\tif ( this.count !== null ) {\n\n\t\t\tnode = buffer( null, uniformType, this.count );\n\n\t\t} else if ( Array.isArray( this.getValueFromReference() ) ) {\n\n\t\t\tnode = uniforms( null, uniformType );\n\n\t\t} else if ( uniformType === 'texture' ) {\n\n\t\t\tnode = texture( null );\n\n\t\t} else {\n\n\t\t\tnode = uniform( null, uniformType );\n\n\t\t}\n\n\t\tthis.node = node;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tif ( this.node === null ) {\n\n\t\t\tthis.updateValue();\n\n\t\t}\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\tgetValueFromReference( object = this.reference ) {\n\n\t\tconst { properties } = this;\n\n\t\tlet value = object[ properties[ 0 ] ];\n\n\t\tfor ( let i = 1; i < properties.length; i ++ ) {\n\n\t\t\tvalue = value[ properties[ i ] ];\n\n\t\t}\n\n\t\treturn value;\n\n\t}\n\n\tupdateReference( state ) {\n\n\t\tthis.reference = this.object !== null ? this.object : state.object;\n\n\t\treturn this.reference;\n\n\t}\n\n\tsetup() {\n\n\t\tthis.updateValue();\n\n\t\treturn this.node;\n\n\t}\n\n\tupdate( /*frame*/ ) {\n\n\t\tthis.updateValue();\n\n\t}\n\n\tupdateValue() {\n\n\t\tif ( this.node === null ) this.setNodeType( this.uniformType );\n\n\t\tconst value = this.getValueFromReference();\n\n\t\tif ( Array.isArray( value ) ) {\n\n\t\t\tthis.node.array = value;\n\n\t\t} else {\n\n\t\t\tthis.node.value = value;\n\n\t\t}\n\n\t}\n\n}\n\nexport default ReferenceNode;\n\nexport const reference = ( name, type, object ) => nodeObject( new ReferenceNode( name, type, object ) );\nexport const referenceBuffer = ( name, type, count, object ) => nodeObject( new ReferenceNode( name, type, object, count ) );\n\naddNodeClass( 'ReferenceNode', ReferenceNode );\n"],"mappings":"AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,iBAAiB;AACpD,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,OAAOC,gBAAgB,MAAM,8BAA8B;AAE3D,MAAMC,oBAAoB,SAASD,gBAAgB,CAAC;EAEnDE,WAAWA,CAAEC,aAAa,EAAEC,SAAS,EAAG;IAEvC,KAAK,CAAED,aAAa,EAAEC,SAAU,CAAC;IAEjC,IAAI,CAACD,aAAa,GAAGA,aAAa;IAElC,IAAI,CAACE,sBAAsB,GAAG,IAAI;EAEnC;EAEAC,WAAWA,CAAA,EAAG;IAEb,OAAO,IAAI,CAACH,aAAa,CAACI,WAAW;EAEtC;EAEAC,QAAQA,CAAEC,OAAO,EAAG;IAEnB,MAAMC,OAAO,GAAG,KAAK,CAACF,QAAQ,CAAEC,OAAQ,CAAC;IACzC,MAAME,SAAS,GAAG,IAAI,CAACR,aAAa,CAACG,WAAW,CAAC,CAAC;IAClD,MAAMM,WAAW,GAAG,IAAI,CAACN,WAAW,CAAC,CAAC;IAEtC,OAAOG,OAAO,CAACI,MAAM,CAAEH,OAAO,EAAEC,SAAS,EAAEC,WAAY,CAAC;EAEzD;AAED;AAEA,MAAME,aAAa,SAAStB,IAAI,CAAC;EAEhCU,WAAWA,CAAEa,QAAQ,EAAER,WAAW,EAAES,MAAM,GAAG,IAAI,EAAEC,KAAK,GAAG,IAAI,EAAG;IAEjE,KAAK,CAAC,CAAC;IAEP,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACR,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACS,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAElB,IAAI,CAACC,UAAU,GAAGH,QAAQ,CAACI,KAAK,CAAE,GAAI,CAAC;IACvC,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,IAAI,GAAG,IAAI;IAEhB,IAAI,CAACC,UAAU,GAAG5B,cAAc,CAAC6B,MAAM;EAExC;EAEAC,OAAOA,CAAEpB,SAAS,EAAG;IAEpB,OAAON,UAAU,CAAE,IAAIG,oBAAoB,CAAE,IAAI,EAAEH,UAAU,CAAEM,SAAU,CAAE,CAAE,CAAC;EAE/E;EAEAqB,WAAWA,CAAElB,WAAW,EAAG;IAE1B,IAAIc,IAAI,GAAG,IAAI;IAEf,IAAK,IAAI,CAACJ,KAAK,KAAK,IAAI,EAAG;MAE1BI,IAAI,GAAGxB,MAAM,CAAE,IAAI,EAAEU,WAAW,EAAE,IAAI,CAACU,KAAM,CAAC;IAE/C,CAAC,MAAM,IAAKS,KAAK,CAACC,OAAO,CAAE,IAAI,CAACC,qBAAqB,CAAC,CAAE,CAAC,EAAG;MAE3DP,IAAI,GAAGtB,QAAQ,CAAE,IAAI,EAAEQ,WAAY,CAAC;IAErC,CAAC,MAAM,IAAKA,WAAW,KAAK,SAAS,EAAG;MAEvCc,IAAI,GAAGzB,OAAO,CAAE,IAAK,CAAC;IAEvB,CAAC,MAAM;MAENyB,IAAI,GAAG1B,OAAO,CAAE,IAAI,EAAEY,WAAY,CAAC;IAEpC;IAEA,IAAI,CAACc,IAAI,GAAGA,IAAI;EAEjB;EAEAf,WAAWA,CAAEG,OAAO,EAAG;IAEtB,IAAK,IAAI,CAACY,IAAI,KAAK,IAAI,EAAG;MAEzB,IAAI,CAACQ,WAAW,CAAC,CAAC;IAEnB;IAEA,OAAO,IAAI,CAACR,IAAI,CAACf,WAAW,CAAEG,OAAQ,CAAC;EAExC;EAEAmB,qBAAqBA,CAAEZ,MAAM,GAAG,IAAI,CAACI,SAAS,EAAG;IAEhD,MAAM;MAAEF;IAAW,CAAC,GAAG,IAAI;IAE3B,IAAIY,KAAK,GAAGd,MAAM,CAAEE,UAAU,CAAE,CAAC,CAAE,CAAE;IAErC,KAAM,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,UAAU,CAACc,MAAM,EAAED,CAAC,EAAG,EAAG;MAE9CD,KAAK,GAAGA,KAAK,CAAEZ,UAAU,CAAEa,CAAC,CAAE,CAAE;IAEjC;IAEA,OAAOD,KAAK;EAEb;EAEAG,eAAeA,CAAEC,KAAK,EAAG;IAExB,IAAI,CAACd,SAAS,GAAG,IAAI,CAACJ,MAAM,KAAK,IAAI,GAAG,IAAI,CAACA,MAAM,GAAGkB,KAAK,CAAClB,MAAM;IAElE,OAAO,IAAI,CAACI,SAAS;EAEtB;EAEAe,KAAKA,CAAA,EAAG;IAEP,IAAI,CAACN,WAAW,CAAC,CAAC;IAElB,OAAO,IAAI,CAACR,IAAI;EAEjB;EAEAe,MAAMA,CAAA,CAAE;EAAA,EAAY;IAEnB,IAAI,CAACP,WAAW,CAAC,CAAC;EAEnB;EAEAA,WAAWA,CAAA,EAAG;IAEb,IAAK,IAAI,CAACR,IAAI,KAAK,IAAI,EAAG,IAAI,CAACI,WAAW,CAAE,IAAI,CAAClB,WAAY,CAAC;IAE9D,MAAMuB,KAAK,GAAG,IAAI,CAACF,qBAAqB,CAAC,CAAC;IAE1C,IAAKF,KAAK,CAACC,OAAO,CAAEG,KAAM,CAAC,EAAG;MAE7B,IAAI,CAACT,IAAI,CAACgB,KAAK,GAAGP,KAAK;IAExB,CAAC,MAAM;MAEN,IAAI,CAACT,IAAI,CAACS,KAAK,GAAGA,KAAK;IAExB;EAED;AAED;AAEA,eAAehB,aAAa;AAE5B,OAAO,MAAMM,SAAS,GAAGA,CAAEkB,IAAI,EAAEC,IAAI,EAAEvB,MAAM,KAAMlB,UAAU,CAAE,IAAIgB,aAAa,CAAEwB,IAAI,EAAEC,IAAI,EAAEvB,MAAO,CAAE,CAAC;AACxG,OAAO,MAAMwB,eAAe,GAAGA,CAAEF,IAAI,EAAEC,IAAI,EAAEtB,KAAK,EAAED,MAAM,KAAMlB,UAAU,CAAE,IAAIgB,aAAa,CAAEwB,IAAI,EAAEC,IAAI,EAAEvB,MAAM,EAAEC,KAAM,CAAE,CAAC;AAE5HxB,YAAY,CAAE,eAAe,EAAEqB,aAAc,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}