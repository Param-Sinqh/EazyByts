{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { nodeImmutable, nodeProxy } from '../shadernode/ShaderNode.js';\nimport { cameraNear, cameraFar } from '../accessors/CameraNode.js';\nimport { positionView } from '../accessors/PositionNode.js';\nimport { viewportDepthTexture } from './ViewportDepthTextureNode.js';\nclass ViewportDepthNode extends Node {\n  constructor(scope, valueNode = null) {\n    super('float');\n    this.scope = scope;\n    this.valueNode = valueNode;\n    this.isViewportDepthNode = true;\n  }\n  generate(builder) {\n    const {\n      scope\n    } = this;\n    if (scope === ViewportDepthNode.DEPTH_PIXEL) {\n      return builder.getFragDepth();\n    }\n    return super.generate(builder);\n  }\n  setup( /*builder*/\n  ) {\n    const {\n      scope\n    } = this;\n    let node = null;\n    if (scope === ViewportDepthNode.DEPTH) {\n      node = viewZToOrthographicDepth(positionView.z, cameraNear, cameraFar);\n    } else if (scope === ViewportDepthNode.DEPTH_TEXTURE) {\n      const texture = this.valueNode || viewportDepthTexture();\n      const viewZ = perspectiveDepthToViewZ(texture, cameraNear, cameraFar);\n      node = viewZToOrthographicDepth(viewZ, cameraNear, cameraFar);\n    } else if (scope === ViewportDepthNode.DEPTH_PIXEL) {\n      if (this.valueNode !== null) {\n        node = depthPixelBase().assign(this.valueNode);\n      }\n    }\n    return node;\n  }\n}\n\n// NOTE: viewZ, the z-coordinate in camera space, is negative for points in front of the camera\n\n// -near maps to 0; -far maps to 1\nexport const viewZToOrthographicDepth = (viewZ, near, far) => viewZ.add(near).div(near.sub(far));\n\n// maps orthographic depth in [ 0, 1 ] to viewZ\nexport const orthographicDepthToViewZ = (depth, near, far) => near.sub(far).mul(depth).sub(near);\n\n// NOTE: https://twitter.com/gonnavis/status/1377183786949959682\n\n// -near maps to 0; -far maps to 1\nexport const viewZToPerspectiveDepth = (viewZ, near, far) => near.add(viewZ).mul(far).div(far.sub(near).mul(viewZ));\n\n// maps perspective depth in [ 0, 1 ] to viewZ\nexport const perspectiveDepthToViewZ = (depth, near, far) => near.mul(far).div(far.sub(near).mul(depth).sub(far));\nViewportDepthNode.DEPTH = 'depth';\nViewportDepthNode.DEPTH_TEXTURE = 'depthTexture';\nViewportDepthNode.DEPTH_PIXEL = 'depthPixel';\nexport default ViewportDepthNode;\nconst depthPixelBase = nodeProxy(ViewportDepthNode, ViewportDepthNode.DEPTH_PIXEL);\nexport const depth = nodeImmutable(ViewportDepthNode, ViewportDepthNode.DEPTH);\nexport const depthTexture = nodeProxy(ViewportDepthNode, ViewportDepthNode.DEPTH_TEXTURE);\nexport const depthPixel = nodeImmutable(ViewportDepthNode, ViewportDepthNode.DEPTH_PIXEL);\ndepthPixel.assign = value => depthPixelBase(value);\naddNodeClass('ViewportDepthNode', ViewportDepthNode);","map":{"version":3,"names":["Node","addNodeClass","nodeImmutable","nodeProxy","cameraNear","cameraFar","positionView","viewportDepthTexture","ViewportDepthNode","constructor","scope","valueNode","isViewportDepthNode","generate","builder","DEPTH_PIXEL","getFragDepth","setup","node","DEPTH","viewZToOrthographicDepth","z","DEPTH_TEXTURE","texture","viewZ","perspectiveDepthToViewZ","depthPixelBase","assign","near","far","add","div","sub","orthographicDepthToViewZ","depth","mul","viewZToPerspectiveDepth","depthTexture","depthPixel","value"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/display/ViewportDepthNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { nodeImmutable, nodeProxy } from '../shadernode/ShaderNode.js';\nimport { cameraNear, cameraFar } from '../accessors/CameraNode.js';\nimport { positionView } from '../accessors/PositionNode.js';\nimport { viewportDepthTexture } from './ViewportDepthTextureNode.js';\n\nclass ViewportDepthNode extends Node {\n\n\tconstructor( scope, valueNode = null ) {\n\n\t\tsuper( 'float' );\n\n\t\tthis.scope = scope;\n\t\tthis.valueNode = valueNode;\n\n\t\tthis.isViewportDepthNode = true;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { scope } = this;\n\n\t\tif ( scope === ViewportDepthNode.DEPTH_PIXEL ) {\n\n\t\t\treturn builder.getFragDepth();\n\n\t\t}\n\n\t\treturn super.generate( builder );\n\n\t}\n\n\tsetup( /*builder*/ ) {\n\n\t\tconst { scope } = this;\n\n\t\tlet node = null;\n\n\t\tif ( scope === ViewportDepthNode.DEPTH ) {\n\n\t\t\tnode = viewZToOrthographicDepth( positionView.z, cameraNear, cameraFar );\n\n\t\t} else if ( scope === ViewportDepthNode.DEPTH_TEXTURE ) {\n\n\t\t\tconst texture = this.valueNode || viewportDepthTexture();\n\n\t\t\tconst viewZ = perspectiveDepthToViewZ( texture, cameraNear, cameraFar );\n\t\t\tnode = viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\n\n\t\t} else if ( scope === ViewportDepthNode.DEPTH_PIXEL ) {\n\n\t\t\tif ( this.valueNode !== null ) {\n\n \t\t\t\tnode = depthPixelBase().assign( this.valueNode );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n}\n\n// NOTE: viewZ, the z-coordinate in camera space, is negative for points in front of the camera\n\n// -near maps to 0; -far maps to 1\nexport const viewZToOrthographicDepth = ( viewZ, near, far ) => viewZ.add( near ).div( near.sub( far ) );\n\n// maps orthographic depth in [ 0, 1 ] to viewZ\nexport const orthographicDepthToViewZ = ( depth, near, far ) => near.sub( far ).mul( depth ).sub( near );\n\n// NOTE: https://twitter.com/gonnavis/status/1377183786949959682\n\n// -near maps to 0; -far maps to 1\nexport const viewZToPerspectiveDepth = ( viewZ, near, far ) => near.add( viewZ ).mul( far ).div( far.sub( near ).mul( viewZ ) );\n\n// maps perspective depth in [ 0, 1 ] to viewZ\nexport const perspectiveDepthToViewZ = ( depth, near, far ) => near.mul( far ).div( far.sub( near ).mul( depth ).sub( far ) );\n\nViewportDepthNode.DEPTH = 'depth';\nViewportDepthNode.DEPTH_TEXTURE = 'depthTexture';\nViewportDepthNode.DEPTH_PIXEL = 'depthPixel';\n\nexport default ViewportDepthNode;\n\nconst depthPixelBase = nodeProxy( ViewportDepthNode, ViewportDepthNode.DEPTH_PIXEL );\n\nexport const depth = nodeImmutable( ViewportDepthNode, ViewportDepthNode.DEPTH );\nexport const depthTexture = nodeProxy( ViewportDepthNode, ViewportDepthNode.DEPTH_TEXTURE );\nexport const depthPixel = nodeImmutable( ViewportDepthNode, ViewportDepthNode.DEPTH_PIXEL );\n\ndepthPixel.assign = ( value ) => depthPixelBase( value );\n\naddNodeClass( 'ViewportDepthNode', ViewportDepthNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}