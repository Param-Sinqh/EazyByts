{"ast":null,"code":"import { addNodeMaterial } from './NodeMaterial.js';\nimport { transformedClearcoatNormalView } from '../accessors/NormalNode.js';\nimport { clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness, specularColor, specularF90, diffuseColor, metalness, roughness, anisotropy, alphaT, anisotropyT, anisotropyB, ior, transmission, thickness, attenuationDistance, attenuationColor, dispersion } from '../core/PropertyNode.js';\nimport { materialClearcoat, materialClearcoatRoughness, materialClearcoatNormal, materialSheen, materialSheenRoughness, materialIridescence, materialIridescenceIOR, materialIridescenceThickness, materialSpecularIntensity, materialSpecularColor, materialAnisotropy, materialIOR, materialTransmission, materialThickness, materialAttenuationDistance, materialAttenuationColor, materialDispersion } from '../accessors/MaterialNode.js';\nimport { float, vec2, vec3, If } from '../shadernode/ShaderNode.js';\nimport getRoughness from '../functions/material/getRoughness.js';\nimport { TBNViewMatrix } from '../accessors/AccessorsUtils.js';\nimport PhysicalLightingModel from '../functions/PhysicalLightingModel.js';\nimport MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';\nimport { mix, pow2, min } from '../math/MathNode.js';\nimport { MeshPhysicalMaterial } from 'three';\nconst defaultValues = new MeshPhysicalMaterial();\nclass MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {\n  constructor(parameters) {\n    super();\n    this.isMeshPhysicalNodeMaterial = true;\n    this.clearcoatNode = null;\n    this.clearcoatRoughnessNode = null;\n    this.clearcoatNormalNode = null;\n    this.sheenNode = null;\n    this.sheenRoughnessNode = null;\n    this.iridescenceNode = null;\n    this.iridescenceIORNode = null;\n    this.iridescenceThicknessNode = null;\n    this.specularIntensityNode = null;\n    this.specularColorNode = null;\n    this.iorNode = null;\n    this.transmissionNode = null;\n    this.thicknessNode = null;\n    this.attenuationDistanceNode = null;\n    this.attenuationColorNode = null;\n    this.dispersionNode = null;\n    this.anisotropyNode = null;\n    this.setDefaultValues(defaultValues);\n    this.setValues(parameters);\n  }\n  get useClearcoat() {\n    return this.clearcoat > 0 || this.clearcoatNode !== null;\n  }\n  get useIridescence() {\n    return this.iridescence > 0 || this.iridescenceNode !== null;\n  }\n  get useSheen() {\n    return this.sheen > 0 || this.sheenNode !== null;\n  }\n  get useAnisotropy() {\n    return this.anisotropy > 0 || this.anisotropyNode !== null;\n  }\n  get useTransmission() {\n    return this.transmission > 0 || this.transmissionNode !== null;\n  }\n  get useDispersion() {\n    return this.dispersion > 0 || this.dispersionNode !== null;\n  }\n  setupSpecular() {\n    const iorNode = this.iorNode ? float(this.iorNode) : materialIOR;\n    ior.assign(iorNode);\n    specularColor.assign(mix(min(pow2(ior.sub(1.0).div(ior.add(1.0))).mul(materialSpecularColor), vec3(1.0)).mul(materialSpecularIntensity), diffuseColor.rgb, metalness));\n    specularF90.assign(mix(materialSpecularIntensity, 1.0, metalness));\n  }\n  setupLightingModel( /*builder*/\n  ) {\n    return new PhysicalLightingModel(this.useClearcoat, this.useSheen, this.useIridescence, this.useAnisotropy, this.useTransmission, this.useDispersion);\n  }\n  setupVariants(builder) {\n    super.setupVariants(builder);\n\n    // CLEARCOAT\n\n    if (this.useClearcoat) {\n      const clearcoatNode = this.clearcoatNode ? float(this.clearcoatNode) : materialClearcoat;\n      const clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float(this.clearcoatRoughnessNode) : materialClearcoatRoughness;\n      clearcoat.assign(clearcoatNode);\n      clearcoatRoughness.assign(getRoughness({\n        roughness: clearcoatRoughnessNode\n      }));\n    }\n\n    // SHEEN\n\n    if (this.useSheen) {\n      const sheenNode = this.sheenNode ? vec3(this.sheenNode) : materialSheen;\n      const sheenRoughnessNode = this.sheenRoughnessNode ? float(this.sheenRoughnessNode) : materialSheenRoughness;\n      sheen.assign(sheenNode);\n      sheenRoughness.assign(sheenRoughnessNode);\n    }\n\n    // IRIDESCENCE\n\n    if (this.useIridescence) {\n      const iridescenceNode = this.iridescenceNode ? float(this.iridescenceNode) : materialIridescence;\n      const iridescenceIORNode = this.iridescenceIORNode ? float(this.iridescenceIORNode) : materialIridescenceIOR;\n      const iridescenceThicknessNode = this.iridescenceThicknessNode ? float(this.iridescenceThicknessNode) : materialIridescenceThickness;\n      iridescence.assign(iridescenceNode);\n      iridescenceIOR.assign(iridescenceIORNode);\n      iridescenceThickness.assign(iridescenceThicknessNode);\n    }\n\n    // ANISOTROPY\n\n    if (this.useAnisotropy) {\n      const anisotropyV = (this.anisotropyNode ? vec2(this.anisotropyNode) : materialAnisotropy).toVar();\n      anisotropy.assign(anisotropyV.length());\n      If(anisotropy.equal(0.0), () => {\n        anisotropyV.assign(vec2(1.0, 0.0));\n      }).else(() => {\n        anisotropyV.divAssign(anisotropy);\n        anisotropy.assign(anisotropy.saturate());\n      });\n\n      // Roughness along the anisotropy bitangent is the material roughness, while the tangent roughness increases with anisotropy.\n      alphaT.assign(anisotropy.pow2().mix(roughness.pow2(), 1.0));\n      anisotropyT.assign(TBNViewMatrix[0].mul(anisotropyV.x).add(TBNViewMatrix[1].mul(anisotropyV.y)));\n      anisotropyB.assign(TBNViewMatrix[1].mul(anisotropyV.x).sub(TBNViewMatrix[0].mul(anisotropyV.y)));\n    }\n\n    // TRANSMISSION\n\n    if (this.useTransmission) {\n      const transmissionNode = this.transmissionNode ? float(this.transmissionNode) : materialTransmission;\n      const thicknessNode = this.thicknessNode ? float(this.thicknessNode) : materialThickness;\n      const attenuationDistanceNode = this.attenuationDistanceNode ? float(this.attenuationDistanceNode) : materialAttenuationDistance;\n      const attenuationColorNode = this.attenuationColorNode ? vec3(this.attenuationColorNode) : materialAttenuationColor;\n      transmission.assign(transmissionNode);\n      thickness.assign(thicknessNode);\n      attenuationDistance.assign(attenuationDistanceNode);\n      attenuationColor.assign(attenuationColorNode);\n      if (this.useDispersion) {\n        const dispersionNode = this.dispersionNode ? float(this.dispersionNode) : materialDispersion;\n        dispersion.assign(dispersionNode);\n      }\n    }\n  }\n  setupNormal(builder) {\n    super.setupNormal(builder);\n\n    // CLEARCOAT NORMAL\n\n    const clearcoatNormalNode = this.clearcoatNormalNode ? vec3(this.clearcoatNormalNode) : materialClearcoatNormal;\n    transformedClearcoatNormalView.assign(clearcoatNormalNode);\n  }\n  copy(source) {\n    this.clearcoatNode = source.clearcoatNode;\n    this.clearcoatRoughnessNode = source.clearcoatRoughnessNode;\n    this.clearcoatNormalNode = source.clearcoatNormalNode;\n    this.sheenNode = source.sheenNode;\n    this.sheenRoughnessNode = source.sheenRoughnessNode;\n    this.iridescenceNode = source.iridescenceNode;\n    this.iridescenceIORNode = source.iridescenceIORNode;\n    this.iridescenceThicknessNode = source.iridescenceThicknessNode;\n    this.specularIntensityNode = source.specularIntensityNode;\n    this.specularColorNode = source.specularColorNode;\n    this.transmissionNode = source.transmissionNode;\n    this.thicknessNode = source.thicknessNode;\n    this.attenuationDistanceNode = source.attenuationDistanceNode;\n    this.attenuationColorNode = source.attenuationColorNode;\n    this.dispersionNode = source.dispersionNode;\n    this.anisotropyNode = source.anisotropyNode;\n    return super.copy(source);\n  }\n}\nexport default MeshPhysicalNodeMaterial;\naddNodeMaterial('MeshPhysicalNodeMaterial', MeshPhysicalNodeMaterial);","map":{"version":3,"names":["addNodeMaterial","transformedClearcoatNormalView","clearcoat","clearcoatRoughness","sheen","sheenRoughness","iridescence","iridescenceIOR","iridescenceThickness","specularColor","specularF90","diffuseColor","metalness","roughness","anisotropy","alphaT","anisotropyT","anisotropyB","ior","transmission","thickness","attenuationDistance","attenuationColor","dispersion","materialClearcoat","materialClearcoatRoughness","materialClearcoatNormal","materialSheen","materialSheenRoughness","materialIridescence","materialIridescenceIOR","materialIridescenceThickness","materialSpecularIntensity","materialSpecularColor","materialAnisotropy","materialIOR","materialTransmission","materialThickness","materialAttenuationDistance","materialAttenuationColor","materialDispersion","float","vec2","vec3","If","getRoughness","TBNViewMatrix","PhysicalLightingModel","MeshStandardNodeMaterial","mix","pow2","min","MeshPhysicalMaterial","defaultValues","MeshPhysicalNodeMaterial","constructor","parameters","isMeshPhysicalNodeMaterial","clearcoatNode","clearcoatRoughnessNode","clearcoatNormalNode","sheenNode","sheenRoughnessNode","iridescenceNode","iridescenceIORNode","iridescenceThicknessNode","specularIntensityNode","specularColorNode","iorNode","transmissionNode","thicknessNode","attenuationDistanceNode","attenuationColorNode","dispersionNode","anisotropyNode","setDefaultValues","setValues","useClearcoat","useIridescence","useSheen","useAnisotropy","useTransmission","useDispersion","setupSpecular","assign","sub","div","add","mul","rgb","setupLightingModel","setupVariants","builder","anisotropyV","toVar","length","equal","else","divAssign","saturate","x","y","setupNormal","copy","source"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/materials/MeshPhysicalNodeMaterial.js"],"sourcesContent":["import { addNodeMaterial } from './NodeMaterial.js';\nimport { transformedClearcoatNormalView } from '../accessors/NormalNode.js';\nimport { clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness, specularColor, specularF90, diffuseColor, metalness, roughness, anisotropy, alphaT, anisotropyT, anisotropyB, ior, transmission, thickness, attenuationDistance, attenuationColor, dispersion } from '../core/PropertyNode.js';\nimport { materialClearcoat, materialClearcoatRoughness, materialClearcoatNormal, materialSheen, materialSheenRoughness, materialIridescence, materialIridescenceIOR, materialIridescenceThickness, materialSpecularIntensity, materialSpecularColor, materialAnisotropy, materialIOR, materialTransmission, materialThickness, materialAttenuationDistance, materialAttenuationColor, materialDispersion } from '../accessors/MaterialNode.js';\nimport { float, vec2, vec3, If } from '../shadernode/ShaderNode.js';\nimport getRoughness from '../functions/material/getRoughness.js';\nimport { TBNViewMatrix } from '../accessors/AccessorsUtils.js';\nimport PhysicalLightingModel from '../functions/PhysicalLightingModel.js';\nimport MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';\nimport { mix, pow2, min } from '../math/MathNode.js';\nimport { MeshPhysicalMaterial } from 'three';\n\nconst defaultValues = new MeshPhysicalMaterial();\n\nclass MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhysicalNodeMaterial = true;\n\n\t\tthis.clearcoatNode = null;\n\t\tthis.clearcoatRoughnessNode = null;\n\t\tthis.clearcoatNormalNode = null;\n\n\t\tthis.sheenNode = null;\n\t\tthis.sheenRoughnessNode = null;\n\n\t\tthis.iridescenceNode = null;\n\t\tthis.iridescenceIORNode = null;\n\t\tthis.iridescenceThicknessNode = null;\n\n\t\tthis.specularIntensityNode = null;\n\t\tthis.specularColorNode = null;\n\n\t\tthis.iorNode = null;\n\t\tthis.transmissionNode = null;\n\t\tthis.thicknessNode = null;\n\t\tthis.attenuationDistanceNode = null;\n\t\tthis.attenuationColorNode = null;\n\t\tthis.dispersionNode = null;\n\n\t\tthis.anisotropyNode = null;\n\n\t\tthis.setDefaultValues( defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tget useClearcoat() {\n\n\t\treturn this.clearcoat > 0 || this.clearcoatNode !== null;\n\n\t}\n\n\tget useIridescence() {\n\n\t\treturn this.iridescence > 0 || this.iridescenceNode !== null;\n\n\t}\n\n\tget useSheen() {\n\n\t\treturn this.sheen > 0 || this.sheenNode !== null;\n\n\t}\n\n\tget useAnisotropy() {\n\n\t\treturn this.anisotropy > 0 || this.anisotropyNode !== null;\n\n\t}\n\n\tget useTransmission() {\n\n\t\treturn this.transmission > 0 || this.transmissionNode !== null;\n\n\t}\n\n\tget useDispersion() {\n\n\t\treturn this.dispersion > 0 || this.dispersionNode !== null;\n\n\t}\n\n\tsetupSpecular() {\n\n\t\tconst iorNode = this.iorNode ? float( this.iorNode ) : materialIOR;\n\n\t\tior.assign( iorNode );\n\t\tspecularColor.assign( mix( min( pow2( ior.sub( 1.0 ).div( ior.add( 1.0 ) ) ).mul( materialSpecularColor ), vec3( 1.0 ) ).mul( materialSpecularIntensity ), diffuseColor.rgb, metalness ) );\n\t\tspecularF90.assign( mix( materialSpecularIntensity, 1.0, metalness ) );\n\n\t}\n\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhysicalLightingModel( this.useClearcoat, this.useSheen, this.useIridescence, this.useAnisotropy, this.useTransmission, this.useDispersion );\n\n\t}\n\n\tsetupVariants( builder ) {\n\n\t\tsuper.setupVariants( builder );\n\n\t\t// CLEARCOAT\n\n\t\tif ( this.useClearcoat ) {\n\n\t\t\tconst clearcoatNode = this.clearcoatNode ? float( this.clearcoatNode ) : materialClearcoat;\n\t\t\tconst clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float( this.clearcoatRoughnessNode ) : materialClearcoatRoughness;\n\n\t\t\tclearcoat.assign( clearcoatNode );\n\t\t\tclearcoatRoughness.assign( getRoughness( { roughness: clearcoatRoughnessNode } ) );\n\n\t\t}\n\n\t\t// SHEEN\n\n\t\tif ( this.useSheen ) {\n\n\t\t\tconst sheenNode = this.sheenNode ? vec3( this.sheenNode ) : materialSheen;\n\t\t\tconst sheenRoughnessNode = this.sheenRoughnessNode ? float( this.sheenRoughnessNode ) : materialSheenRoughness;\n\n\t\t\tsheen.assign( sheenNode );\n\t\t\tsheenRoughness.assign( sheenRoughnessNode );\n\n\t\t}\n\n\t\t// IRIDESCENCE\n\n\t\tif ( this.useIridescence ) {\n\n\t\t\tconst iridescenceNode = this.iridescenceNode ? float( this.iridescenceNode ) : materialIridescence;\n\t\t\tconst iridescenceIORNode = this.iridescenceIORNode ? float( this.iridescenceIORNode ) : materialIridescenceIOR;\n\t\t\tconst iridescenceThicknessNode = this.iridescenceThicknessNode ? float( this.iridescenceThicknessNode ) : materialIridescenceThickness;\n\n\t\t\tiridescence.assign( iridescenceNode );\n\t\t\tiridescenceIOR.assign( iridescenceIORNode );\n\t\t\tiridescenceThickness.assign( iridescenceThicknessNode );\n\n\t\t}\n\n\t\t// ANISOTROPY\n\n\t\tif ( this.useAnisotropy ) {\n\n\t\t\tconst anisotropyV = ( this.anisotropyNode ? vec2( this.anisotropyNode ) : materialAnisotropy ).toVar();\n\n\t\t\tanisotropy.assign( anisotropyV.length() );\n\n\t\t\tIf( anisotropy.equal( 0.0 ), () => {\n\n\t\t\t\tanisotropyV.assign( vec2( 1.0, 0.0 ) );\n\n\t\t\t} ).else( () => {\n\n\t\t\t\tanisotropyV.divAssign( anisotropy );\n\t\t\t\tanisotropy.assign( anisotropy.saturate() );\n\n\t\t\t} );\n\n\t\t\t// Roughness along the anisotropy bitangent is the material roughness, while the tangent roughness increases with anisotropy.\n\t\t\talphaT.assign( anisotropy.pow2().mix( roughness.pow2(), 1.0 ) );\n\n\t\t\tanisotropyT.assign( TBNViewMatrix[ 0 ].mul( anisotropyV.x ).add( TBNViewMatrix[ 1 ].mul( anisotropyV.y ) ) );\n\t\t\tanisotropyB.assign( TBNViewMatrix[ 1 ].mul( anisotropyV.x ).sub( TBNViewMatrix[ 0 ].mul( anisotropyV.y ) ) );\n\n\t\t}\n\n\t\t// TRANSMISSION\n\n\t\tif ( this.useTransmission ) {\n\n\t\t\tconst transmissionNode = this.transmissionNode ? float( this.transmissionNode ) : materialTransmission;\n\t\t\tconst thicknessNode = this.thicknessNode ? float( this.thicknessNode ) : materialThickness;\n\t\t\tconst attenuationDistanceNode = this.attenuationDistanceNode ? float( this.attenuationDistanceNode ) : materialAttenuationDistance;\n\t\t\tconst attenuationColorNode = this.attenuationColorNode ? vec3( this.attenuationColorNode ) : materialAttenuationColor;\n\n\t\t\ttransmission.assign( transmissionNode );\n\t\t\tthickness.assign( thicknessNode );\n\t\t\tattenuationDistance.assign( attenuationDistanceNode );\n\t\t\tattenuationColor.assign( attenuationColorNode );\n\n\t\t\tif ( this.useDispersion ) {\n\n\t\t\t\tconst dispersionNode = this.dispersionNode ? float( this.dispersionNode ) : materialDispersion;\n\n\t\t\t\tdispersion.assign( dispersionNode );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tsetupNormal( builder ) {\n\n\t\tsuper.setupNormal( builder );\n\n\t\t// CLEARCOAT NORMAL\n\n\t\tconst clearcoatNormalNode = this.clearcoatNormalNode ? vec3( this.clearcoatNormalNode ) : materialClearcoatNormal;\n\n\t\ttransformedClearcoatNormalView.assign( clearcoatNormalNode );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.clearcoatNode = source.clearcoatNode;\n\t\tthis.clearcoatRoughnessNode = source.clearcoatRoughnessNode;\n\t\tthis.clearcoatNormalNode = source.clearcoatNormalNode;\n\n\t\tthis.sheenNode = source.sheenNode;\n\t\tthis.sheenRoughnessNode = source.sheenRoughnessNode;\n\n\t\tthis.iridescenceNode = source.iridescenceNode;\n\t\tthis.iridescenceIORNode = source.iridescenceIORNode;\n\t\tthis.iridescenceThicknessNode = source.iridescenceThicknessNode;\n\n\t\tthis.specularIntensityNode = source.specularIntensityNode;\n\t\tthis.specularColorNode = source.specularColorNode;\n\n\t\tthis.transmissionNode = source.transmissionNode;\n\t\tthis.thicknessNode = source.thicknessNode;\n\t\tthis.attenuationDistanceNode = source.attenuationDistanceNode;\n\t\tthis.attenuationColorNode = source.attenuationColorNode;\n\t\tthis.dispersionNode = source.dispersionNode;\n\n\t\tthis.anisotropyNode = source.anisotropyNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nexport default MeshPhysicalNodeMaterial;\n\naddNodeMaterial( 'MeshPhysicalNodeMaterial', MeshPhysicalNodeMaterial );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}