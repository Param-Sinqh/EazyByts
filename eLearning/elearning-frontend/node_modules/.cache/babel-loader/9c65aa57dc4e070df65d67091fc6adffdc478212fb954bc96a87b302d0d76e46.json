{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\nclass FunctionOverloadingNode extends Node {\n  constructor(functionNodes = [], ...parametersNodes) {\n    super();\n    this.functionNodes = functionNodes;\n    this.parametersNodes = parametersNodes;\n    this._candidateFnCall = null;\n  }\n  getNodeType() {\n    return this.functionNodes[0].shaderNode.layout.type;\n  }\n  setup(builder) {\n    const params = this.parametersNodes;\n    let candidateFnCall = this._candidateFnCall;\n    if (candidateFnCall === null) {\n      let candidateFn = null;\n      let candidateScore = -1;\n      for (const functionNode of this.functionNodes) {\n        const shaderNode = functionNode.shaderNode;\n        const layout = shaderNode.layout;\n        if (layout === null) {\n          throw new Error('FunctionOverloadingNode: FunctionNode must be a layout.');\n        }\n        const inputs = layout.inputs;\n        if (params.length === inputs.length) {\n          let score = 0;\n          for (let i = 0; i < params.length; i++) {\n            const param = params[i];\n            const input = inputs[i];\n            if (param.getNodeType(builder) === input.type) {\n              score++;\n            } else {\n              score = 0;\n            }\n          }\n          if (score > candidateScore) {\n            candidateFn = functionNode;\n            candidateScore = score;\n          }\n        }\n      }\n      this._candidateFnCall = candidateFnCall = candidateFn(...params);\n    }\n    return candidateFnCall;\n  }\n}\nexport default FunctionOverloadingNode;\nconst overloadingBaseFn = nodeProxy(FunctionOverloadingNode);\nexport const overloadingFn = functionNodes => (...params) => overloadingBaseFn(functionNodes, ...params);\naddNodeClass('FunctionOverloadingNode', FunctionOverloadingNode);","map":{"version":3,"names":["Node","addNodeClass","nodeProxy","FunctionOverloadingNode","constructor","functionNodes","parametersNodes","_candidateFnCall","getNodeType","shaderNode","layout","type","setup","builder","params","candidateFnCall","candidateFn","candidateScore","functionNode","Error","inputs","length","score","i","param","input","overloadingBaseFn","overloadingFn"],"sources":["D:/dumps/online-learning-platform-main/Frontend/node_modules/three/examples/jsm/nodes/utils/FunctionOverloadingNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\n\nclass FunctionOverloadingNode extends Node {\n\n\tconstructor( functionNodes = [], ...parametersNodes ) {\n\n\t\tsuper();\n\n\t\tthis.functionNodes = functionNodes;\n\t\tthis.parametersNodes = parametersNodes;\n\n\t\tthis._candidateFnCall = null;\n\n\t}\n\n\tgetNodeType() {\n\n\t\treturn this.functionNodes[ 0 ].shaderNode.layout.type;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst params = this.parametersNodes;\n\n\t\tlet candidateFnCall = this._candidateFnCall;\n\n\t\tif ( candidateFnCall === null ) {\n\n\t\t\tlet candidateFn = null;\n\t\t\tlet candidateScore = - 1;\n\n\t\t\tfor ( const functionNode of this.functionNodes ) {\n\n\t\t\t\tconst shaderNode = functionNode.shaderNode;\n\t\t\t\tconst layout = shaderNode.layout;\n\n\t\t\t\tif ( layout === null ) {\n\n\t\t\t\t\tthrow new Error( 'FunctionOverloadingNode: FunctionNode must be a layout.' );\n\n\t\t\t\t}\n\n\t\t\t\tconst inputs = layout.inputs;\n\n\t\t\t\tif ( params.length === inputs.length ) {\n\n\t\t\t\t\tlet score = 0;\n\n\t\t\t\t\tfor ( let i = 0; i < params.length; i ++ ) {\n\n\t\t\t\t\t\tconst param = params[ i ];\n\t\t\t\t\t\tconst input = inputs[ i ];\n\n\t\t\t\t\t\tif ( param.getNodeType( builder ) === input.type ) {\n\n\t\t\t\t\t\t\tscore ++;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tscore = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( score > candidateScore ) {\n\n\t\t\t\t\t\tcandidateFn = functionNode;\n\t\t\t\t\t\tcandidateScore = score;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._candidateFnCall = candidateFnCall = candidateFn( ...params );\n\n\t\t}\n\n\t\treturn candidateFnCall;\n\n\t}\n\n}\n\nexport default FunctionOverloadingNode;\n\nconst overloadingBaseFn = nodeProxy( FunctionOverloadingNode );\n\nexport const overloadingFn = ( functionNodes ) => ( ...params ) => overloadingBaseFn( functionNodes, ...params );\n\naddNodeClass( 'FunctionOverloadingNode', FunctionOverloadingNode );\n"],"mappings":"AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,iBAAiB;AACpD,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,MAAMC,uBAAuB,SAASH,IAAI,CAAC;EAE1CI,WAAWA,CAAEC,aAAa,GAAG,EAAE,EAAE,GAAGC,eAAe,EAAG;IAErD,KAAK,CAAC,CAAC;IAEP,IAAI,CAACD,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,eAAe,GAAGA,eAAe;IAEtC,IAAI,CAACC,gBAAgB,GAAG,IAAI;EAE7B;EAEAC,WAAWA,CAAA,EAAG;IAEb,OAAO,IAAI,CAACH,aAAa,CAAE,CAAC,CAAE,CAACI,UAAU,CAACC,MAAM,CAACC,IAAI;EAEtD;EAEAC,KAAKA,CAAEC,OAAO,EAAG;IAEhB,MAAMC,MAAM,GAAG,IAAI,CAACR,eAAe;IAEnC,IAAIS,eAAe,GAAG,IAAI,CAACR,gBAAgB;IAE3C,IAAKQ,eAAe,KAAK,IAAI,EAAG;MAE/B,IAAIC,WAAW,GAAG,IAAI;MACtB,IAAIC,cAAc,GAAG,CAAE,CAAC;MAExB,KAAM,MAAMC,YAAY,IAAI,IAAI,CAACb,aAAa,EAAG;QAEhD,MAAMI,UAAU,GAAGS,YAAY,CAACT,UAAU;QAC1C,MAAMC,MAAM,GAAGD,UAAU,CAACC,MAAM;QAEhC,IAAKA,MAAM,KAAK,IAAI,EAAG;UAEtB,MAAM,IAAIS,KAAK,CAAE,yDAA0D,CAAC;QAE7E;QAEA,MAAMC,MAAM,GAAGV,MAAM,CAACU,MAAM;QAE5B,IAAKN,MAAM,CAACO,MAAM,KAAKD,MAAM,CAACC,MAAM,EAAG;UAEtC,IAAIC,KAAK,GAAG,CAAC;UAEb,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,MAAM,CAACO,MAAM,EAAEE,CAAC,EAAG,EAAG;YAE1C,MAAMC,KAAK,GAAGV,MAAM,CAAES,CAAC,CAAE;YACzB,MAAME,KAAK,GAAGL,MAAM,CAAEG,CAAC,CAAE;YAEzB,IAAKC,KAAK,CAAChB,WAAW,CAAEK,OAAQ,CAAC,KAAKY,KAAK,CAACd,IAAI,EAAG;cAElDW,KAAK,EAAG;YAET,CAAC,MAAM;cAENA,KAAK,GAAG,CAAC;YAEV;UAED;UAEA,IAAKA,KAAK,GAAGL,cAAc,EAAG;YAE7BD,WAAW,GAAGE,YAAY;YAC1BD,cAAc,GAAGK,KAAK;UAEvB;QAED;MAED;MAEA,IAAI,CAACf,gBAAgB,GAAGQ,eAAe,GAAGC,WAAW,CAAE,GAAGF,MAAO,CAAC;IAEnE;IAEA,OAAOC,eAAe;EAEvB;AAED;AAEA,eAAeZ,uBAAuB;AAEtC,MAAMuB,iBAAiB,GAAGxB,SAAS,CAAEC,uBAAwB,CAAC;AAE9D,OAAO,MAAMwB,aAAa,GAAKtB,aAAa,IAAM,CAAE,GAAGS,MAAM,KAAMY,iBAAiB,CAAErB,aAAa,EAAE,GAAGS,MAAO,CAAC;AAEhHb,YAAY,CAAE,yBAAyB,EAAEE,uBAAwB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}